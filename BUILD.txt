Intructions for Building NeoOffice
----------------------------------

This git branch - master - contains unfinished code for building NeoOffice with the LibreOffice 5.4 code on macOS Mojave for Intel. No work on this git branch has been done recently so this branch may no longer build.

None of the official NeoOffice releases are built from this branch. If you want to build the latest official NeoOffice release, switch to the NeoOffice-2021_branch git branch.

Important: In order to build NeoOffice, all of the steps below must be followed. These steps install several third party tools that are needed by NeoOffice's underlying LibreOffice code. Also, these steps will install the git LFS extension so that several very large files needed by the build can be downloaded from GitHub's LFS repository.

If any third party tools are not installed or the build is run on a different version of macOS or with a different version of Xcode, the build will likely fail.


Steps for building on macOS 12 Monterey
---------------------------------------

At this time, NeoOffice will only build on macOS 12 Monterey. The resulting build should run on macOS 11 Big Sur, macOS 12 Monterey, and macOS 13 Ventura.

1. Make sure that you have downloaded and installed the following dependencies from http://developer.apple.com/ website:

   macOS 12.6 Monterey:
     Xcode v14.0.1
     Command Line Tools for Xcode v14

2. Download and install Oracle's Java 17 Development Kit (JDK) from the following URL:

   http://www.neooffice.org/neojava/javadownload.php

3. Install the following Mac Ports packages by downloading, compiling, and installing the following packages from the http://www.macports.org/ website. Note that you will need download and install the MacPorts package to install the MacPorts "port" command. The "port" command is then used to do the downloading, compiling, and installation of the following packages:

   sudo /opt/local/bin/port install autoconf -x11 +universal
   sudo /opt/local/bin/port install automake -x11 +universal
   sudo /opt/local/bin/port install gmake -x11 +universal
   sudo /opt/local/bin/port install gnutar -x11 +universal
   sudo /opt/local/bin/port install gperf -x11 +universal
   sudo /opt/local/bin/port install xz -x11 +universal

   After running the above command, add "/opt/local/bin" to the end of your shell's PATH environment variable so that the build can all of the commands installed by /opt/local/bin/port command in the previous step.

4. Make sure the git LFS extension is installed by downloading git-lfs:

   curl -L -O https://github.com/git-lfs/git-lfs/releases/download/v3.0.2/git-lfs-darwin-amd64-v3.0.2.zip
   mkdir git-lfs-darwin-amd64-v3.0.2 && cd git-lfs-darwin-amd64-v3.0.2 && unzip ../git-lfs-darwin-amd64-v3.0.2.zip && sudo ./install.sh
   git lfs install

5. Download all LFS files from Github's LFS repository:

   cd "<source folder>"
   git lfs fetch
   git lfs checkout

6. Installed the Perl Archive::Zip module using the following command. You may need to run this command more than once as the unit tests may fail the first time that you run it:

   sudo cpan -i Archive::Zip

7. To build the installers, obtain the following types of codesigning certificates from Apple and install the certificates in the macOS Keychain Access application:

   3rd Party Mac Developer Application
   3rd Party Mac Developer Installer
   Developer ID Application
   Developer ID Installer

8. Assign the codesigning certificates obtained in the previous step by copying the "<source folder>/certs.neo.mk" file to "<source folder>/certs.mk". Then, open the "<source folder>/certs.mk" file and replace all of Planamesa Inc.'s certificate names and team ID with your certificate names team ID. Important note: each certificate name assigned in the "<source folder>/certs.mk" file must match the certificate's "Common Name" field in the macOS Keychain Access application.

9. Start the build by invoking the following commands:

   cd "<source folder>"
   gmake

   A successful build will create the following 2 "<source folder>/build/install*/*.dmg" files:

      "<source folder>/build/install/*.dmg" - Installer for the Mac App Store version
      "<source folder>/build/install3/*.dmg" - Installer for the Professional Edition version

   Important note: if the build fails in the build.neo_tests make target, uncheck iCloud Drive in the System Preferences iCloud panel and reinvoke the above commands to continue the build.

10. After a successful build, you can optionally build patch installers by invoking the following commands:

   cd "<source folder>"
   gmake build.all_patches

   A successful build will create the following 2 "<source folder>/build/patch_install*/*.dmg" files:

      "<source folder>/build/patch_install/*.dmg" - Patch installer for the Mac App Store version
      "<source folder>/build/patch_install3/*.dmg" - Patch installer for the Professional Edition version

11. You can notarize and staple the installer .dmg files built in the previous step using Apple's notarization service by executing the following command:

   gmake build.staple_all

   If you built patch installers, also invoke the following command:

   gmake build.staple_all_patches

   Important: if the installer build fails with a "notarytool store-credentials" error, you will need to execute the following command once in a Terminal to cache your Apple developer ID's password in the macOS Keychain Access application so that Xcode's notarytool can fetch it and use it to upload the installer to Apple's notarization servers:

   gmake APPLEDEVELOPERID=<e-mail of your Apple Developer account> build.store_notarytool_credentials

12. There are several make rules to clean build files. To clean only the NeoOffice installers and patch installers execute the following commmand:

    gmake build.clean_neo_installers

    To clean only the NeoOffice unit tests and preserve the both the LibreoOffice build and custom NeoOffice code build, execute the following commmand:

    gmake build.clean_neo_tests

    To clean only the custom NeoOffice code and preserve the LibreOffice build, execute the following commmand:

    gmake build.clean_neo

    To completely clean all build files, execute the following command:

    gmake build.clean_all
