#!/bin/bash -x
# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-
#
# This file is part of the LibreOffice project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This file incorporates work covered by the following license notice:
#
#   Licensed to the Apache Software Foundation (ASF) under one or more
#   contributor license agreements. See the NOTICE file distributed
#   with this work for additional information regarding copyright
#   ownership. The ASF licenses this file to you under the Apache
#   License, Version 2.0 (the "License"); you may not use this file
#   except in compliance with the License. You may obtain a copy of
#   the License at http://www.apache.org/licenses/LICENSE-2.0 .
#

product_minor_version=`echo '$(PRODUCT_VERSION)' | sed 's#^$(PRODUCT_VERSION_BASE)\.*\([0-9]*\) *$(PRODUCT_VERSION_EXT)$#\1#'`
product_patch_version=`echo '$(PRODUCT_PATCH_VERSION)' | sed 's#^Patch ##'`
userinstall="$(PRODUCT_USER_INSTALL_DIR)"
target_file_type_base="$(TARGET_FILE_TYPE_BASE)"
target_file_types="$(TARGET_MACHINE)"
last_installed_product_found=

check_installation() {

	if [ -z "$1" ] ; then
		return 1;
	fi

	if [ ! -f "$1/Contents/Info.plist" ] ; then
		return 1;
	fi

	file_types=`file "$1/Contents/MacOS/soffice.bin" | tr -s '\t' ' ' | sed 's#^.*: ##' | grep '^[[:alnum:]].*[[:alnum:]]$'`
	for i in $target_file_types ; do
		echo "$file_types" | grep -q "^$target_file_type_base $i$"
		if [ "$?" != "0" ] ; then
			return 1;
		fi
	done
	for i in `echo "$file_types" | sed "s#^$target_file_type_base ##"` ; do
		file_type_found=0;
		for j in $target_file_types ; do
			if [ "$i" == "$j" ] ; then
				file_type_found=1
				break;
			fi
		done
		if [ $file_type_found -eq 0 ] ; then
			return 1;
		fi
	done

	if [ -f "$1/Contents/Resources/bootstraprc" ] ; then
		# Check for matching build machine. Note: we trim "local." off the end
		# of the build machine because some test patches were released with
		# "local." truncated.
		grep "`echo '$(BUILD_MACHINE)' | sed 's#\.local\.$#\.#'`" "$1/Contents/Resources/bootstraprc" >/dev/null 2>&1
		if [ "$?" != "0" ] ; then
			return 1;
		fi

		productkey=`grep '^ProductKey=' "$1/Contents/Resources/bootstraprc"`
		productpatch=`grep '^ProductPatch=' "$1/Contents/Resources/bootstraprc"`
		if [ -z "$productkey" -o -z "$productpatch" ] ; then
			return 1;
		fi
		productkey=`echo "$productkey" | awk -F= '{ print $2 }'`
		productpatch=`echo "$productpatch" | awk -F= '{ print $2 }' | sed 's#^Patch ##'`
		productminor=`echo "$productkey" | grep '^$(PRODUCT_NAME) $(PRODUCT_VERSION_BASE)\.*[0-9]* *$(PRODUCT_VERSION_EXT)$'`

		# Allow a product base match
		if [ "$productkey" = "$(PRODUCT_NAME) $(PRODUCT_VERSION)" ] ; then
			if [ -z "$productpatch" ] ; then
				return 0
			elif [ "$productpatch" -le "$product_patch_version" ] ; then
				return 0
			fi
		elif [ ! -z "$productminor" ] ; then
			productminor=`echo "$productminor" | sed 's#^$(PRODUCT_NAME) $(PRODUCT_VERSION_BASE)\.*\([0-9]*\) *$(PRODUCT_VERSION_EXT)$#\1#'`
			if [ -z "$productminor" ] ; then
				return 0
			elif [ "$productminor" -le "$product_minor_version" ] ; then
				return 0
			fi
		elif [ ! -z "$(PREVIOUS_PRODUCT_VERSION)" -a "$productkey" = "$(PRODUCT_NAME) $(PREVIOUS_PRODUCT_VERSION)" ] ; then
			return 0
		fi

		if [ ! -z "$productkey" ] ; then
			last_installed_product_found="$productkey"
		fi
	fi

	return 1

}

update_installation() {

	if [ -z "$1" -o ! -f "$1/Archive.pax.gz" ] ; then
		return 1;
	fi

	check_installation "$2" || return 0

	# Unzip new files
	( cd "$2" || exit 1 ; pax -r -z -p e -f "$1/Archive.pax.gz" ) || return 1

	sync

	# Install shared .oxt files
	if [ -d "$2/Contents/share/uno_packages/cache/uno_packages" ] ; then
		for i in `cd "$1" ; find . -name "*.oxt"` ; do
			oxtfile=`basename "$i"`
			for j in `cd "$2/Contents/share/uno_packages/cache/uno_packages" ; find . -type d -name "$oxtfile"` ; do
				unzip -o "$1/$i" -d "$2/Contents/share/uno_packages/cache/uno_packages/$j"
				sync
			done
		done
	fi

	# Remove LibreLogo
	if [ -d "$2/Contents/Resources/Scripts/python/LibreLogo" ] ; then
		rm -Rf "$2/Contents/Resources/Scripts/python/LibreLogo" ]
	fi

    # Make sure that all directories and files are readable by all
    chmod -Rf a+r "$2" || return 1

	# Touch shared libraries to fix bug 280
	for i in `cd "$2/Contents" ; find . -type f -name "*.dylib*" ; find . -type f -name "*.bin" ; find . -type f -name "*.jar"`; do
		touch -f "$2/Contents/$i"   
	done

	sudo_user=
	if [ ! -z "$USER" -a `id -u "$USER"` != "0" ] ; then
		sudouser="$USER"
	fi

	lsregister="/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister"
	if [ -x "$lsregister" ] ; then
		lsregisterargs="-f -r -all s,d,u"
	else
		lsregister=
	fi

	if [ ! -z "$lsregister" ] ; then
		"$lsregister" $lsregisterargs "$2"
		if [ ! -z "$sudouser" ] ; then
			sudo -H -u "$sudouser" /bin/sh -l -c "$lsregister $lsregisterargs \"$2\""
		fi
	fi

	# Touch installation directory to force activation of any bundled Spotlight
	# plugins
	touch -f "$2"

	# Register the QuickLook plugin
	if [ -x "/usr/bin/qlmanage" ] ; then
		/usr/bin/qlmanage -r
		if [ ! -z "$sudouser" ] ; then
			sudo -H -u "$sudouser" /bin/sh -l -c "/usr/bin/qlmanage -r"
		fi
	fi

	return 0

}

check_running() {

	check_installation "$1"
	return "$?"

}

