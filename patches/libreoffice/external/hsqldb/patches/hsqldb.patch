--- misc/hsqldb/src/org/hsqldb/Database.java	2007-10-20 15:57:55.000000000 -0700
+++ misc/build/hsqldb/src/org/hsqldb/Database.java	2016-02-28 08:25:10.000000000 -0800
@@ -227,7 +227,7 @@
                     fileAccessClass =
                         classLoader.loadClass(fileaccess_class_name);
                 }
-                catch (ClassNotFoundException e) {
+                catch (Throwable e) {
                     fileAccessClass = Class.forName(fileaccess_class_name);
                 }
                 Constructor constructor =
--- misc/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java	2023-02-26 15:32:15.000000000 -0500
+++ misc/build/hsqldb/src/org/hsqldb/DatabaseCommandInterpreter.java	2023-02-26 15:56:48.000000000 -0500
@@ -403,6 +403,11 @@
                     throw Trace.error(Trace.INVALID_IDENTIFIER);
                 }
 
+                // added condition to avoid execution of spurious command in .script or .log file
+                if (session.isProcessingScript() || session.isProcessingLog()) {
+                    return new Result(ResultConstants.UPDATECOUNT);
+                }
+
                 dsw = new ScriptWriterText(database, token, true, true, true);
 
                 dsw.writeAll();
@@ -1224,9 +1229,7 @@
             t.createPrimaryKey(null, primaryConst.core.mainColArray, true);
 
             if (primaryConst.core.mainColArray != null) {
-                if (primaryConst.constName == null) {
-                    primaryConst.constName = t.makeSysPKName();
-                }
+                primaryConst.constName = t.makeSysPKName();
 
                 Constraint newconstraint =
                     new Constraint(primaryConst.constName, t,
--- misc/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java	2016-02-27 08:53:13.000000000 -0800
+++ misc/build/hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java	2016-02-28 08:20:55.000000000 -0800
@@ -61,7 +61,9 @@
 
     static {
         try {
-            String prop = System.getProperty(hsqldb_method_class_names);
+            // Return an empty string to make sure that security is as tight
+            // as possible by default
+            String prop = System.getProperty(hsqldb_method_class_names, "");
 
             if (prop != null) {
                 accessibleJavaMethodNames = new HashSet();
--- misc/hsqldb/src/org/hsqldb/persist/LockFile.java	2008-03-17 08:02:50.000000000 -0700
+++ misc/build/hsqldb/src/org/hsqldb/persist/LockFile.java	2016-02-28 08:19:11.000000000 -0800
@@ -604,6 +604,21 @@
 
         lockFile.setPath(path);
 
+        // Some platforms like Mac OS X cannot lock mounted file systems
+        // so test for such problems so that we can fall back to this
+        // class' locking behavior.
+        try {
+            if (!lockFile.tryLock()) {
+                lockFile = new LockFile();
+                lockFile.setPath(path);
+            }
+            else {
+                lockFile.tryRelease();
+            }
+        } catch (Throwable t) {
+            Trace.printSystemOut(t.toString());
+        }
+
         return lockFile;
     }
 
--- misc/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java	2016-02-27 08:53:17.000000000 -0800
+++ misc/build/hsqldb/src/org/hsqldb/persist/ScaledRAFile.java	2016-02-28 08:17:31.000000000 -0800
@@ -97,7 +97,7 @@
                     storageClass =
                         classLoader.loadClass(classname);
                 }
-                catch (ClassNotFoundException e) {
+                catch (Throwable e) {
                     storageClass = Class.forName(classname);
                 }
                 Constructor constructor =
