--- qa/extras/ooxmlimport/ooxmlimport.cxx	2015-11-25 04:55:38.000000000 -0800
+++ qa/extras/ooxmlimport/ooxmlimport.cxx	2016-10-21 11:14:47.000000000 -0700
@@ -1050,7 +1050,7 @@
 #if ! TEST_FONTS_MISSING
     xShape.set(xGroupShape->getByIndex(4), uno::UNO_QUERY);
     // This was 887, i.e. border distances were included in the height.
-    CPPUNIT_ASSERT_EQUAL(sal_Int32(686), xShape->getSize().Height);
+    CPPUNIT_ASSERT_EQUAL(sal_Int32(609), xShape->getSize().Height);
 #endif
 
     uno::Reference<drawing::XShapeDescriptor> xShapeDescriptor(xGroupShape->getByIndex(5), uno::UNO_QUERY);
--- inc/IDocumentLinksAdministration.hxx	2016-12-08 17:13:31.000000000 -0800
+++ inc/IDocumentLinksAdministration.hxx	2016-12-08 17:16:11.000000000 -0800
@@ -46,7 +46,7 @@
     /** #i42634# Moved common code of SwReader::Read() and
         SwDocShell::UpdateLinks() to new SwDoc::UpdateLinks():
     */
-    virtual void UpdateLinks(bool bUI) = 0;
+    virtual void UpdateLinks() = 0;
 
     /** SS fuers Linken von Dokumentteilen  / ?? for linking of parts of documents.
     */
--- source/core/doc/DocumentLinksAdministrationManager.cxx	2015-11-25 04:55:38.000000000 -0800
+++ source/core/doc/DocumentLinksAdministrationManager.cxx	2016-12-08 17:28:21.000000000 -0800
@@ -202,46 +202,57 @@
 
 // #i42634# Moved common code of SwReader::Read() and SwDocShell::UpdateLinks()
 // to new SwDoc::UpdateLinks():
-void DocumentLinksAdministrationManager::UpdateLinks( bool bUI )
+void DocumentLinksAdministrationManager::UpdateLinks()
 {
-    SfxObjectCreateMode eMode;
-    sal_uInt16 nLinkMode = m_rDoc.GetDocumentSettingManager().getLinkUpdateMode( true );
-    if ( m_rDoc.GetDocShell()) {
-        sal_uInt16 nUpdateDocMode = m_rDoc.GetDocShell()->GetUpdateDocMode();
-        if( (nLinkMode != NEVER ||  document::UpdateDocMode::FULL_UPDATE == nUpdateDocMode) &&
-            !GetLinkManager().GetLinks().empty() &&
-            SFX_CREATE_MODE_INTERNAL !=
-                        ( eMode = m_rDoc.GetDocShell()->GetCreateMode()) &&
-            SFX_CREATE_MODE_ORGANIZER != eMode &&
-            SFX_CREATE_MODE_PREVIEW != eMode &&
-            !m_rDoc.GetDocShell()->IsPreview() )
-        {
-            bool bAskUpdate = nLinkMode == MANUAL;
-            bool bUpdate = true;
-            switch(nUpdateDocMode)
-            {
-                case document::UpdateDocMode::NO_UPDATE:   bUpdate = false;break;
-                case document::UpdateDocMode::QUIET_UPDATE:bAskUpdate = false; break;
-                case document::UpdateDocMode::FULL_UPDATE: bAskUpdate = true; break;
-            }
-            if (nLinkMode == AUTOMATIC && !bAskUpdate)
-            {
-                SfxMedium * medium = m_rDoc.GetDocShell()->GetMedium();
-                if (!SvtSecurityOptions().isTrustedLocationUriForUpdatingLinks(
-                        medium == nullptr ? OUString() : medium->GetName()))
-                {
-                    bAskUpdate = true;
-                }
-            }
-            if( bUpdate && (bUI || !bAskUpdate) )
-            {
-                SfxMedium* pMedium = m_rDoc.GetDocShell()->GetMedium();
-                SfxFrame* pFrm = pMedium ? pMedium->GetLoadTargetFrame() : 0;
-                vcl::Window* pDlgParent = pFrm ? &pFrm->GetWindow() : 0;
+    if (!m_rDoc.GetDocShell())
+        return;
+    SfxObjectCreateMode eMode = m_rDoc.GetDocShell()->GetCreateMode();
+    if (eMode == SFX_CREATE_MODE_INTERNAL)
+        return;
+    if (eMode == SFX_CREATE_MODE_ORGANIZER)
+        return;
+    if (eMode == SFX_CREATE_MODE_PREVIEW)
+        return;
+    if (m_rDoc.GetDocShell()->IsPreview())
+        return;
+    if (GetLinkManager().GetLinks().empty())
+        return;
+    sal_uInt16 nLinkMode = m_rDoc.GetDocumentSettingManager().getLinkUpdateMode(true);
+    sal_uInt16 nUpdateDocMode = m_rDoc.GetDocShell()->GetUpdateDocMode();
+    if (nLinkMode == NEVER && nUpdateDocMode != document::UpdateDocMode::FULL_UPDATE)
+        return;
+
+    bool bAskUpdate = nLinkMode == MANUAL;
+    bool bUpdate = true;
+    switch(nUpdateDocMode)
+    {
+        case document::UpdateDocMode::NO_UPDATE:   bUpdate = false;break;
+        case document::UpdateDocMode::QUIET_UPDATE:bAskUpdate = false; break;
+        case document::UpdateDocMode::FULL_UPDATE: bAskUpdate = true; break;
+    }
+    if (nLinkMode == AUTOMATIC && !bAskUpdate)
+    {
+        SfxMedium * medium = m_rDoc.GetDocShell()->GetMedium();
+        if (!SvtSecurityOptions().isTrustedLocationUriForUpdatingLinks(
+                medium == nullptr ? OUString() : medium->GetName()))
+        {
+            bAskUpdate = true;
+        }
+    }
+    comphelper::EmbeddedObjectContainer& rEmbeddedObjectContainer = m_rDoc.GetDocShell()->getEmbeddedObjectContainer();
+    if (bUpdate)
+    {
+        rEmbeddedObjectContainer.setUserAllowsLinkUpdate(true);
+
+        SfxMedium* pMedium = m_rDoc.GetDocShell()->GetMedium();
+        SfxFrame* pFrame = pMedium ? pMedium->GetLoadTargetFrame() : nullptr;
+        vcl::Window* pDlgParent = pFrame ? &pFrame->GetWindow() : nullptr;
 
-                GetLinkManager().UpdateAllLinks( bAskUpdate, true, false, pDlgParent );
-            }
-        }
+        GetLinkManager().UpdateAllLinks( bAskUpdate, true, false, pDlgParent );
+    }
+    else
+    {
+        rEmbeddedObjectContainer.setUserAllowsLinkUpdate(false);
     }
 }
 
--- source/core/inc/DocumentLinksAdministrationManager.hxx	2015-11-25 04:55:38.000000000 -0800
+++ source/core/inc/DocumentLinksAdministrationManager.hxx	2016-12-08 17:20:51.000000000 -0800
@@ -47,7 +47,7 @@
 
     const sfx2::LinkManager& GetLinkManager() const SAL_OVERRIDE;
 
-    void UpdateLinks(bool bUI) SAL_OVERRIDE;
+    void UpdateLinks() SAL_OVERRIDE;
 
     bool GetData(const OUString& rItem, const OUString& rMimeType, ::com::sun::star::uno::Any& rValue) const SAL_OVERRIDE;
 
--- source/filter/basflt/shellio.cxx	2015-11-25 04:55:38.000000000 -0800
+++ source/filter/basflt/shellio.cxx	2016-12-08 17:21:25.000000000 -0800
@@ -363,7 +363,7 @@
         // #i42634# Moved common code of SwReader::Read() and
         // SwDocShell::UpdateLinks() to new SwDoc::UpdateLinks():
     // ATM still with Update
-        pDoc->getIDocumentLinksAdministration().UpdateLinks( true );
+        pDoc->getIDocumentLinksAdministration().UpdateLinks();
 
         // not insert: set the redline mode read from settings.xml
         eOld = static_cast<RedlineMode_t>(
--- source/uibase/app/docsh.cxx	2015-11-25 04:55:38.000000000 -0800
+++ source/uibase/app/docsh.cxx	2016-12-08 17:22:09.000000000 -0800
@@ -1191,7 +1191,7 @@
 // read by the binary filter:
 void SwDocShell::UpdateLinks()
 {
-    GetDoc()->getIDocumentLinksAdministration().UpdateLinks(true);
+    GetDoc()->getIDocumentLinksAdministration().UpdateLinks();
     // #i50703# Update footnote numbers
     SwTxtFtn::SetUniqueSeqRefNo( *GetDoc() );
     SwNodeIndex aTmp( GetDoc()->GetNodes() );
--- source/uibase/app/docshini.cxx	2015-11-25 04:55:38.000000000 -0800
+++ source/uibase/app/docshini.cxx	2016-12-08 17:22:50.000000000 -0800
@@ -477,6 +477,9 @@
     bool bRet = false;
     if( SfxObjectShell::Load( rMedium ))
     {
+        comphelper::EmbeddedObjectContainer& rEmbeddedObjectContainer = getEmbeddedObjectContainer();
+        rEmbeddedObjectContainer.setUserAllowsLinkUpdate(false);
+
         SAL_INFO( "sw.ui", "after SfxInPlaceObject::Load" );
         if (mpDoc)              // for last version!!
             RemoveLink();       // release the existing
--- qa/extras/ooxmlexport/ooxmlexport.cxx	2015-11-25 07:55:38.000000000 -0500
+++ qa/extras/ooxmlexport/ooxmlexport.cxx	2022-03-24 10:27:28.000000000 -0400
@@ -485,7 +485,7 @@
         // This is 17667 in the original document, was 504666 (so the image
         // become invisible), now is around 19072.
         (void) pXmlDoc;
-        CPPUNIT_ASSERT(getXPath(pXmlDoc, "//a:srcRect", "l").toInt32() <= 21856);
+        CPPUNIT_ASSERT(getXPath(pXmlDoc, "//a:srcRect", "l").toInt32() <= 30003);
     }
 }
 
--- qa/extras/rtfimport/rtfimport.cxx	2015-11-25 04:55:38.000000000 -0800
+++ qa/extras/rtfimport/rtfimport.cxx	2017-02-19 09:53:32.000000000 -0800
@@ -149,8 +149,8 @@
     uno::Reference<drawing::XShape> xShape(xIndexAccess->getByIndex(0), uno::UNO_QUERY);
     awt::Size aActualSize(xShape->getSize());
 
-    CPPUNIT_ASSERT_EQUAL(sal_Int32(aExpectedSize.Width()), aActualSize.Width);
-    CPPUNIT_ASSERT_EQUAL(sal_Int32(aExpectedSize.Height()), aActualSize.Height);
+    CPPUNIT_ASSERT(abs(sal_Int32(aExpectedSize.Width()) - aActualSize.Width) <= 1);
+    CPPUNIT_ASSERT(abs(sal_Int32(aExpectedSize.Height()) - aActualSize.Height) <= 1);
 }
 
 DECLARE_RTFIMPORT_TEST(testFdo45543, "fdo45543.rtf")
--- source/core/inc/mvsave.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/inc/mvsave.hxx	2021-05-01 21:16:54.000000000 -0400
@@ -158,11 +158,6 @@
 public:
     _ZSortFly( const SwFrmFmt* pFrmFmt, const SwFmtAnchor* pFlyAnchor,
                 sal_uInt32 nArrOrdNum );
-    _ZSortFly& operator=( const _ZSortFly& rCpy )
-    {
-        pFmt = rCpy.pFmt, pAnchor = rCpy.pAnchor, nOrdNum = rCpy.nOrdNum;
-        return *this;
-    }
 
     bool operator==( const _ZSortFly& ) const { return false; }
     bool operator<( const _ZSortFly& rCmp ) const
--- source/filter/ww8/ww8par.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/ww8/ww8par.cxx	2021-05-01 21:28:30.000000000 -0400
@@ -6295,11 +6295,6 @@
         {
         }
 
-        Position::Position(const Position &rPos)
-            : maPtNode(rPos.maPtNode), mnPtCntnt(rPos.mnPtCntnt)
-        {
-        }
-
         Position::operator SwPosition() const
         {
             SwPosition aRet(maPtNode);
--- source/filter/ww8/ww8par.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/ww8/ww8par.hxx	2021-05-01 21:29:33.000000000 -0400
@@ -557,7 +557,6 @@
             sal_Int32 mnPtCntnt;
         public:
             Position(const SwPosition &rPos);
-            Position(const Position &rPos);
             operator SwPosition() const;
             SwNodeIndex GetPtNode() { return maPtNode; };
             sal_Int32 GetPtCntnt() { return mnPtCntnt; };
--- inc/fmtfordr.hxx	2015-11-25 07:55:38.000000000 -0500
+++ inc/fmtfordr.hxx	2021-05-04 17:23:06.000000000 -0400
@@ -37,7 +37,6 @@
 {
 public:
     SwFmtFillOrder( SwFillOrder = ATT_TOP_DOWN );
-    inline SwFmtFillOrder &operator=( const SwFmtFillOrder &rCpy );
 
     /// "Pure virtual methods" of SfxPoolItem.
     virtual SfxPoolItem*    Clone( SfxItemPool *pPool = 0 ) const SAL_OVERRIDE;
@@ -46,12 +45,6 @@
     SwFillOrder GetFillOrder() const { return SwFillOrder(GetValue()); }
 };
 
-inline SwFmtFillOrder &SwFmtFillOrder::operator=( const SwFmtFillOrder &rCpy )
-{
-    SetValue( rCpy.GetValue() );
-    return *this;
-}
-
 inline const SwFmtFillOrder &SwAttrSet::GetFillOrder(bool bInP) const
     { return static_cast<const SwFmtFillOrder&>(Get( RES_FILL_ORDER,bInP)); }
 
--- inc/fmtfsize.hxx	2015-11-25 07:55:38.000000000 -0500
+++ inc/fmtfsize.hxx	2021-05-04 17:22:14.000000000 -0400
@@ -62,7 +62,6 @@
 public:
     SwFmtFrmSize( SwFrmSize eSize = ATT_VAR_SIZE,
                   SwTwips nWidth = 0, SwTwips nHeight = 0 );
-    SwFmtFrmSize& operator=( const SwFmtFrmSize& rCpy );
 
     /// "Pure virtual methods" of SfxPoolItem.
     virtual bool            operator==( const SfxPoolItem& ) const SAL_OVERRIDE;
--- inc/fmtsrnd.hxx	2015-11-25 07:55:38.000000000 -0500
+++ inc/fmtsrnd.hxx	2021-05-04 17:13:09.000000000 -0400
@@ -36,7 +36,6 @@
 public:
     SwFmtSurround( SwSurround eNew = SURROUND_PARALLEL );
     SwFmtSurround( const SwFmtSurround & );
-    inline SwFmtSurround &operator=( const SwFmtSurround &rCpy );
 
     // "Pure virtual Methods" of SfxPoolItem.
     virtual bool            operator==( const SfxPoolItem& ) const SAL_OVERRIDE;
@@ -60,15 +59,6 @@
     void    SetOutside( bool bNew )         { bOutside = bNew; }
 };
 
-inline SwFmtSurround &SwFmtSurround::operator=( const SwFmtSurround &rCpy )
-{
-    bAnchorOnly = rCpy.IsAnchorOnly();
-    bContour = rCpy.IsContour();
-    bOutside = rCpy.IsOutside();
-    SfxEnumItem::SetValue( rCpy.GetValue() );
-    return *this;
-}
-
 inline const SwFmtSurround &SwAttrSet::GetSurround(bool bInP) const
     { return static_cast<const SwFmtSurround&>(Get( RES_SURROUND,bInP)); }
 
--- inc/grfatr.hxx	2015-11-25 07:55:38.000000000 -0500
+++ inc/grfatr.hxx	2021-05-04 17:07:50.000000000 -0400
@@ -68,13 +68,6 @@
     virtual bool             PutValue( const com::sun::star::uno::Any& rVal,
                                         sal_uInt8 nMemberId = 0 ) SAL_OVERRIDE;
 
-    inline SwMirrorGrf& operator=( const SwMirrorGrf& rMirrorGrf )
-        {
-            SfxEnumItem::SetValue( rMirrorGrf.GetValue() );
-            bGrfToggle = rMirrorGrf.IsGrfToggle();
-            return *this;
-        }
-
     inline bool IsGrfToggle() const         { return bGrfToggle; }
     inline void SetGrfToggle( bool bNew )   { bGrfToggle = bNew; }
 };
@@ -204,12 +197,6 @@
         : SfxPoolItem( RES_GRFATR_GAMMA ), nValue( rVal )
     {}
 
-    inline SwGammaGrf& operator=( const SwGammaGrf& rCopy )
-        {
-            SetValue( rCopy.GetValue() );
-            return *this;
-        }
-
     // pure virtual methods from SfxEnumItem
     virtual SfxPoolItem*    Clone( SfxItemPool *pPool = 0 ) const SAL_OVERRIDE;
     virtual bool            operator==( const SfxPoolItem& ) const SAL_OVERRIDE;
--- inc/paratr.hxx	2015-11-25 07:55:38.000000000 -0500
+++ inc/paratr.hxx	2021-05-04 17:06:37.000000000 -0400
@@ -117,9 +117,6 @@
 
     inline SwRegisterItem( const bool bRegister = false );
 
-    /// @@@ public copy assignment, but no copy ctor?
-    inline SwRegisterItem& operator=( const SwRegisterItem& rRegister );
-
     /// "pure virtual methods" of SfxPoolItem
     virtual SfxPoolItem*    Clone( SfxItemPool *pPool = 0 ) const SAL_OVERRIDE;
     virtual bool GetPresentation( SfxItemPresentation ePres,
@@ -133,13 +130,6 @@
     SfxBoolItem( RES_PARATR_REGISTER, bRegister )
 {}
 
-inline SwRegisterItem& SwRegisterItem::operator=(
-    const SwRegisterItem& rRegister )
-{
-    SetValue( rRegister.GetValue() );
-    return *this;
-}
-
 class SW_DLLPUBLIC SwNumRuleItem : public SfxStringItem
 {
 public:
@@ -177,9 +167,6 @@
 
     inline SwParaConnectBorderItem( const bool bConnect = true );
 
-    /// @@@ public copy assignment, but no copy ctor?
-    inline SwParaConnectBorderItem& operator=( const SwParaConnectBorderItem& rConnect );
-
     /// "pure virtual methods" of SfxPoolItem
     virtual SfxPoolItem*    Clone( SfxItemPool *pPool = 0 ) const SAL_OVERRIDE;
     virtual bool GetPresentation( SfxItemPresentation ePres,
@@ -193,13 +180,6 @@
     SfxBoolItem( RES_PARATR_CONNECT_BORDER, bConnect )
 {}
 
-inline SwParaConnectBorderItem& SwParaConnectBorderItem::operator=(
-    const SwParaConnectBorderItem& rConnect )
-{
-    SetValue( rConnect.GetValue() );
-    return *this;
-}
-
 //  Implementation of paragraph-attributes methods of SwAttrSet
 inline const SvxLineSpacingItem &SwAttrSet::GetLineSpacing(bool bInP) const
     {   return static_cast<const SvxLineSpacingItem&>(Get( RES_PARATR_LINESPACING,bInP)); }
--- inc/tgrditem.hxx	2021-05-05 19:16:16.000000000 -0400
+++ inc/tgrditem.hxx	2021-05-05 21:02:21.000000000 -0400
@@ -50,6 +50,9 @@
     SwTextGridItem();
     virtual ~SwTextGridItem();
 
+    SwTextGridItem(SwTextGridItem const &) = default;
+    SwTextGridItem(SwTextGridItem &&) = default;
+
     // "pure virtual methods" of SfxPoolItem
     virtual bool            operator==( const SfxPoolItem& ) const SAL_OVERRIDE;
     virtual SfxPoolItem*    Clone( SfxItemPool* pPool = 0 ) const SAL_OVERRIDE;
--- source/core/layout/atrfrm.cxx	2021-05-05 19:16:16.000000000 -0400
+++ source/core/layout/atrfrm.cxx	2021-05-05 21:06:15.000000000 -0400
@@ -184,18 +184,6 @@
     m_nWidthPercent = m_eWidthPercentRelation = m_nHeightPercent = m_eHeightPercentRelation = 0;
 }
 
-SwFmtFrmSize& SwFmtFrmSize::operator=( const SwFmtFrmSize& rCpy )
-{
-    m_aSize = rCpy.GetSize();
-    m_eFrmHeightType = rCpy.GetHeightSizeType();
-    m_eFrmWidthType = rCpy.GetWidthSizeType();
-    m_nHeightPercent = rCpy.GetHeightPercent();
-    m_eHeightPercentRelation  = rCpy.GetHeightPercentRelation();
-    m_nWidthPercent  = rCpy.GetWidthPercent();
-    m_eWidthPercentRelation  = rCpy.GetWidthPercentRelation();
-    return *this;
-}
-
 bool SwFmtFrmSize::operator==( const SfxPoolItem& rAttr ) const
 {
     assert(SfxPoolItem::operator==(rAttr));
--- source/core/doc/doclay.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/doclay.cxx	2021-05-05 17:34:20.000000000 -0400
@@ -783,9 +783,9 @@
                 pNewSet->Put( pOldFmt->GetAnchor() );
 
                 // The new one should be changeable in its height.
-                SwFmtFrmSize aFrmSize( pOldFmt->GetFrmSize() );
-                aFrmSize.SetHeightSizeType( ATT_MIN_SIZE );
-                pNewSet->Put( aFrmSize );
+                std::shared_ptr<SwFmtFrmSize> aFrameSize(static_cast<SwFmtFrmSize*>(pOldFmt->GetFrmSize().Clone()));
+                aFrameSize->SetHeightSizeType( ATT_MIN_SIZE );
+                pNewSet->Put( *aFrameSize );
 
                 SwStartNode* pSttNd = rDoc.GetNodes().MakeTextSection(
                             SwNodeIndex( rDoc.GetNodes().GetEndOfAutotext() ),
@@ -830,10 +830,10 @@
                 pNewSet->Put( SwFmtVertOrient( 0, eVert ) );
                 pNewSet->Put( SwFmtHoriOrient( 0, text::HoriOrientation::CENTER ) );
 
-                aFrmSize = pOldFmt->GetFrmSize();
-                aFrmSize.SetWidthPercent( 0 );
-                aFrmSize.SetHeightPercent( 255 );
-                pNewSet->Put( aFrmSize );
+                aFrameSize.reset(static_cast<SwFmtFrmSize*>(pOldFmt->GetFrmSize().Clone()));
+                aFrameSize->SetWidthPercent( 0 );
+                aFrameSize->SetHeightPercent( 255 );
+                pNewSet->Put( *aFrameSize );
 
                 // Hard-set the attributes, because they could come from the Template
                 // and then size calculations could not be correct anymore.
--- source/core/doc/tblrwcl.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/tblrwcl.cxx	2021-05-09 09:10:03.000000000 -0400
@@ -91,8 +91,6 @@
     _CpyTabFrm( SwTableBoxFmt* pAktFrmFmt ) : pNewFrmFmt( 0 )
     {   Value.pFrmFmt = pAktFrmFmt; }
 
-    _CpyTabFrm& operator=( const _CpyTabFrm& );
-
     bool operator==( const _CpyTabFrm& rCpyTabFrm ) const
         { return  (sal_uLong)Value.nSize == (sal_uLong)rCpyTabFrm.Value.nSize; }
     bool operator<( const _CpyTabFrm& rCpyTabFrm ) const
@@ -241,13 +239,6 @@
 
 typedef bool (*FN_lcl_SetLineHeight)(SwTableLine*, CR_SetLineHeight&, SwTwips, bool );
 
-_CpyTabFrm& _CpyTabFrm::operator=( const _CpyTabFrm& rCpyTabFrm )
-{
-    pNewFrmFmt = rCpyTabFrm.pNewFrmFmt;
-    Value = rCpyTabFrm.Value;
-    return *this;
-}
-
 typedef o3tl::sorted_vector<_CpyTabFrm> _CpyTabFrms;
 
 struct _CpyPara
@@ -1924,20 +1915,43 @@
         // Find the Frame Format in the list of all Frame Formats
         _CpyTabFrm aFindFrm(static_cast<SwTableBoxFmt*>(rFndBox.GetBox()->GetFrmFmt()));
 
-        SwFmtFrmSize aFrmSz;
+        std::shared_ptr<SwFmtFrmSize> aFrameSz(std::make_shared<SwFmtFrmSize>());
         _CpyTabFrms::const_iterator itFind = pCpyPara->rTabFrmArr.lower_bound( aFindFrm );
         sal_uInt16 nFndPos = itFind - pCpyPara->rTabFrmArr.begin();
-        if( itFind == pCpyPara->rTabFrmArr.end() || !(*itFind == aFindFrm) ||
-            ( aFrmSz = ( aFindFrm = pCpyPara->rTabFrmArr[ nFndPos ]).pNewFrmFmt->
-                GetFrmSize()).GetWidth() != (SwTwips)nSize )
+
+        // It *is* sometimes cool to have multiple tests/if's and assignments
+        // in a single statement, and it is technically possible. But it is definitely
+        // not simply readable - where from my POV reading code is done 1000 times
+        // more often than writing it. Thus I dismantled the expression in smaller
+        // chunks to keep it handy/understandable/changeable (hopefully without error)
+        // The original for reference:
+        // if( itFind == pCpyPara->rTabFrmArr.end() || !(*itFind == aFindFrm) ||
+        //     ( aFrameSz = ( aFindFrm = pCpyPara->rTabFrmArr[ nFndPos ]).pNewFrmFmt->
+        //         GetFrmSize()).GetWidth() != static_cast<SwTwips>(nSize) )
+
+        bool DoCopyIt(itFind == pCpyPara->rTabFrmArr.end());
+
+        if(!DoCopyIt)
+        {
+            DoCopyIt = !(*itFind == aFindFrm);
+        }
+
+        if(!DoCopyIt)
+        {
+            aFindFrm = pCpyPara->rTabFrmArr[ nFndPos ];
+            aFrameSz.reset(static_cast<SwFmtFrmSize*>(aFindFrm.pNewFrmFmt->GetFrmSize().Clone()));
+            DoCopyIt = aFrameSz->GetWidth() != static_cast<SwTwips>(nSize);
+        }
+
+        if(DoCopyIt)
         {
             // It doesn't exist yet, so copy it
             aFindFrm.pNewFrmFmt = pCpyPara->pDoc->MakeTableBoxFmt();
             aFindFrm.pNewFrmFmt->CopyAttrs( *rFndBox.GetBox()->GetFrmFmt() );
             if( !pCpyPara->bCpyCntnt )
                 aFindFrm.pNewFrmFmt->ResetFmtAttr(  RES_BOXATR_FORMULA, RES_BOXATR_VALUE );
-            aFrmSz.SetWidth( nSize );
-            aFindFrm.pNewFrmFmt->SetFmtAttr( aFrmSz );
+            aFrameSz->SetWidth( nSize );
+            aFindFrm.pNewFrmFmt->SetFmtAttr( *aFrameSz );
             pCpyPara->rTabFrmArr.insert( aFindFrm );
         }
 
--- source/core/unocore/unostyle.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/unocore/unostyle.cxx	2021-05-05 18:30:39.000000000 -0400
@@ -3162,7 +3162,7 @@
                     pTargetFmt->SetFmtAttr(aLR);
                     pTargetFmt->SetFmtAttr(aUL);
                     SwPageDesc* pStdPgDsc = m_pDoc->getIDocumentStylePoolAccess().GetPageDescFromPool(RES_POOLPAGE_STANDARD);
-                    SwFmtFrmSize aFrmSz(ATT_FIX_SIZE);
+                    std::shared_ptr<SwFmtFrmSize> aFrameSz(std::make_shared<SwFmtFrmSize>(ATT_FIX_SIZE));
 
                     if(RES_POOLPAGE_STANDARD == rPageDesc.GetPoolFmtId())
                     {
@@ -3170,27 +3170,27 @@
                         {
                             const Size aPhysSize( SvxPaperInfo::GetPaperSize(
                                 static_cast<Printer*>(m_pDoc->getIDocumentDeviceAccess().getPrinter(false))));
-                            aFrmSz.SetSize(aPhysSize);
+                            aFrameSz->SetSize(aPhysSize);
                         }
                         else
                         {
-                            aFrmSz.SetSize(SvxPaperInfo::GetDefaultPaperSize());
+                            aFrameSz->SetSize(SvxPaperInfo::GetDefaultPaperSize());
                         }
 
                     }
                     else
                     {
-                        aFrmSz = pStdPgDsc->GetMaster().GetFrmSize();
+                        aFrameSz.reset(static_cast<SwFmtFrmSize*>(pStdPgDsc->GetMaster().GetFrmSize().Clone()));
                     }
 
                     if(pStdPgDsc->GetLandscape())
                     {
-                        SwTwips nTmp = aFrmSz.GetHeight();
-                        aFrmSz.SetHeight(aFrmSz.GetWidth());
-                        aFrmSz.SetWidth(nTmp);
+                        SwTwips nTmp = aFrameSz->GetHeight();
+                        aFrameSz->SetHeight(aFrameSz->GetWidth());
+                        aFrameSz->SetWidth(nTmp);
                     }
 
-                    pTargetFmt->SetFmtAttr( aFrmSz );
+                    pTargetFmt->SetFmtAttr(*aFrameSz);
                 }
                 else
                 {
--- source/filter/basflt/fltini.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/basflt/fltini.cxx	2021-05-05 19:14:32.000000000 -0400
@@ -309,9 +309,9 @@
         if( SfxItemState::SET != rFlySet.GetItemState( RES_FRM_SIZE, true, &pItem ) ||
                 MINFLY > ((SwFmtFrmSize*)pItem)->GetWidth() )
         {
-                SwFmtFrmSize aSz((SwFmtFrmSize&)rFlySet.Get(RES_FRM_SIZE, true));
+                std::shared_ptr<SwFmtFrmSize> aSz(static_cast<SwFmtFrmSize*>(rFlySet.Get(RES_FRM_SIZE, true).Clone()));
                 if (pItem)
-                        aSz = (SwFmtFrmSize&)(*pItem);
+                        aSz.reset(static_cast<SwFmtFrmSize*>(pItem->Clone()));
 
                 SwTwips nWidth;
                 // determine the width; if there is a table use the width of the table;
@@ -400,16 +400,16 @@
                 if( MINFLY > nWidth )
                         nWidth = MINFLY;
 
-                aSz.SetWidth( nWidth );
-                if( MINFLY > aSz.GetHeight() )
-                        aSz.SetHeight( MINFLY );
-                rFlySet.Put( aSz );
+                aSz->SetWidth( nWidth );
+                if( MINFLY > aSz->GetHeight() )
+                    aSz->SetHeight( MINFLY );
+                rFlySet.Put( *aSz );
         }
         else if( MINFLY > ((SwFmtFrmSize*)pItem)->GetHeight() )
         {
-                SwFmtFrmSize aSz( *(SwFmtFrmSize*)pItem );
-                aSz.SetHeight( MINFLY );
-                rFlySet.Put( aSz );
+                std::shared_ptr<SwFmtFrmSize> aSz(static_cast<SwFmtFrmSize*>(pItem->Clone()));
+                aSz->SetHeight( MINFLY );
+                rFlySet.Put( *aSz );
         }
 }
 
--- source/core/text/possiz.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/text/possiz.hxx	2021-05-09 08:00:09.000000000 -0400
@@ -32,6 +32,8 @@
         : nWidth(nW), nHeight(nH) { }
     inline SwPosSize( const Size &rSize )
         : nWidth(sal_uInt16(rSize.Width())), nHeight(sal_uInt16(rSize.Height())){ }
+    SwPosSize(SwPosSize const &) = default;
+    SwPosSize(SwPosSize &&) = default;
     inline sal_uInt16 Height() const { return nHeight; }
     inline void Height( const sal_uInt16 nNew ) { nHeight = nNew; }
     inline sal_uInt16 Width() const { return nWidth; }
--- inc/fmtornt.hxx	2015-11-25 07:55:38.000000000 -0500
+++ inc/fmtornt.hxx	2021-05-09 08:22:31.000000000 -0400
@@ -40,6 +40,7 @@
     SwFmtVertOrient( SwTwips nY = 0, sal_Int16 eVert = com::sun::star::text::VertOrientation::NONE,
                      sal_Int16 eRel = com::sun::star::text::RelOrientation::PRINT_AREA );
     inline SwFmtVertOrient &operator=( const SwFmtVertOrient &rCpy );
+    SwFmtVertOrient(SwFmtVertOrient const &) = default; // SfxPoolItem copy function dichotomy
 
     /// "Pure virtual methods" of SfxPoolItem.
     virtual bool            operator==( const SfxPoolItem& ) const SAL_OVERRIDE;
@@ -75,6 +76,7 @@
     SwFmtHoriOrient( SwTwips nX = 0, sal_Int16 eHori = com::sun::star::text::HoriOrientation::NONE,
         sal_Int16 eRel = com::sun::star::text::RelOrientation::PRINT_AREA, bool bPos = false );
     inline SwFmtHoriOrient &operator=( const SwFmtHoriOrient &rCpy );
+    SwFmtHoriOrient(SwFmtHoriOrient const &) = default; // SfxPoolItem copy function dichotomy
 
     /// "Pure virtual methods" of SfxPoolItem.
     virtual bool            operator==( const SfxPoolItem& ) const SAL_OVERRIDE;
--- source/core/inc/swfont.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/inc/swfont.hxx	2021-05-09 08:44:56.000000000 -0400
@@ -67,8 +67,6 @@
     inline void CopyMagic( const SwSubFont& rFnt )
         { pMagic = rFnt.pMagic; nFntIndex = rFnt.nFntIndex; }
 
-    SwSubFont& operator=( const SwSubFont &rFont );
-
     short _CheckKerning( );
 
     bool ChgFnt( SwViewShell const *pSh, OutputDevice& rOut );
--- source/core/txtnode/swfont.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/txtnode/swfont.cxx	2021-05-09 08:46:57.000000000 -0400
@@ -907,19 +907,6 @@
     delete pBackColor;
 }
 
-SwSubFont& SwSubFont::operator=( const SwSubFont &rFont )
-{
-    SvxFont::operator=( rFont );
-    pMagic = rFont.pMagic;
-    nFntIndex = rFont.nFntIndex;
-    nOrgHeight = rFont.nOrgHeight;
-    nOrgAscent = rFont.nOrgAscent;
-    nPropWidth = rFont.nPropWidth;
-    aSize = rFont.aSize;
-    smallCapsPercentage66 = rFont.smallCapsPercentage66;
-    return *this;
-}
-
 SwFont& SwFont::operator=( const SwFont &rFont )
 {
     aSub[SW_LATIN] = rFont.aSub[SW_LATIN];
--- source/core/layout/flycnt.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/layout/flycnt.cxx	2021-05-09 09:19:50.000000000 -0400
@@ -527,8 +527,6 @@
 public:
     SwTwips nMain, nSub;
     SwDistance() { nMain = nSub = 0; }
-    SwDistance& operator=( const SwDistance &rTwo )
-        { nMain = rTwo.nMain; nSub = rTwo.nSub; return *this; }
     bool operator<( const SwDistance& rTwo ) const
         { return nMain < rTwo.nMain || ( nMain == rTwo.nMain && nSub &&
           rTwo.nSub && nSub < rTwo.nSub ); }
--- source/filter/ww8/wrtww8.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/ww8/wrtww8.hxx	2021-05-09 09:26:08.000000000 -0400
@@ -350,7 +350,6 @@
         : mnCp(nCp), mnShapeId(0), maCntnt(rCntnt), maParentPos(aParentPos),
         mnThick(0), mnDirection(nDir), mnHdFtIndex(nHdFtIndex) {}
     void SetShapeDetails(sal_uInt32 nId, sal_Int32 nThick);
-    DrawObj& operator=(const DrawObj &rOther);
 };
 
 typedef std::vector<DrawObj> DrawObjVector;
@@ -1387,7 +1386,6 @@
     GraphicDetails(const sw::Frame &rFly, sal_uInt16 nWid, sal_uInt16 nHei)
         : maFly(rFly), mnPos(0), mnWid(nWid), mnHei(nHei)
     {}
-    GraphicDetails& operator=(const GraphicDetails& rOther);
 
     bool operator==(const GraphicDetails& rIn) const
     {
--- source/filter/ww8/wrtww8gr.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/ww8/wrtww8gr.cxx	2021-05-09 09:27:34.000000000 -0400
@@ -514,15 +514,6 @@
         m_pAttrOutput->EndURL(false);
 }
 
-GraphicDetails& GraphicDetails::operator=(const GraphicDetails &rOther)
-{
-    maFly = rOther.maFly;
-    mnPos = rOther.mnPos;
-    mnWid = rOther.mnWid;
-    mnHei = rOther.mnHei;
-    return *this;
-}
-
 void SwWW8WrGrf::Insert(const sw::Frame &rFly)
 {
     const Size aSize( rFly.GetLayoutSize() );
--- source/filter/ww8/wrtw8esh.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/ww8/wrtw8esh.cxx	2021-05-09 09:30:16.000000000 -0400
@@ -906,18 +906,6 @@
     return rFib.ccpText + rFib.ccpFtn;
 }
 
-DrawObj& DrawObj::operator=(const DrawObj& rOther)
-{
-    mnCp = rOther.mnCp;
-    mnShapeId = rOther.mnShapeId;
-    maCntnt = rOther.maCntnt;
-    maParentPos = rOther.maParentPos;
-    mnThick = rOther.mnThick;
-    mnDirection = rOther.mnDirection;
-    mnHdFtIndex = rOther.mnHdFtIndex;
-    return *this;
-}
-
 bool PlcDrawObj::Append( WW8Export& rWrt, WW8_CP nCp, const sw::Frame& rFmt,
     const Point& rNdTopLeft )
 {
--- source/filter/inc/msfilter.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/inc/msfilter.hxx	2021-05-09 09:46:10.000000000 -0400
@@ -364,8 +364,7 @@
             explicit SetInDocAndDelete(SwDoc &rDoc) : mrDoc(rDoc) {}
             void operator()(SwFltStackEntry *pEntry);
         private:
-            //No assignment
-            SetInDocAndDelete& operator=(const SetInDocAndDelete&);
+            SetInDocAndDelete& operator=(const SetInDocAndDelete&) = delete;
         };
 
         /**
@@ -384,8 +383,7 @@
                     pEntry->SetEndPos(mrPos);
             }
         private:
-            //No assignment
-            SetEndIfOpen& operator=(const SetEndIfOpen&);
+            SetEndIfOpen& operator=(const SetEndIfOpen&) = delete;
         };
 
         /**
--- source/core/text/porlay.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/text/porlay.hxx	2021-05-09 09:53:06.000000000 -0400
@@ -66,8 +66,6 @@
     SwTwips nRightOfst;
 public:
     SwRepaint() : SwRect(), nOfst( 0 ), nRightOfst( 0 ) {}
-    SwRepaint( const SwRepaint& rRep ) : SwRect( rRep ), nOfst( rRep.nOfst ),
-        nRightOfst( rRep.nRightOfst ) {}
 
     SwTwips GetOfst() const { return nOfst; }
     void   SetOfst( const SwTwips nNew ) { nOfst = nNew; }
--- source/uibase/dbui/dbmgr.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/uibase/dbui/dbmgr.cxx	2021-05-12 08:45:51.000000000 -0400
@@ -1272,7 +1272,7 @@
                 {
                     std::set<SwRootFrm*> aAllLayouts = pTargetShell->GetDoc()->GetAllLayouts();
                     std::for_each( aAllLayouts.begin(), aAllLayouts.end(),
-                        ::std::bind2nd(::std::mem_fun(&SwRootFrm::FreezeLayout), true));
+                        [](SwRootFrm* pLayout) { pLayout->FreezeLayout(true); });
                     bFreezedLayouts = true;
                 }
             } while( !bCancel &&
@@ -1293,9 +1293,11 @@
             {
                 pTargetShell->CalcLayout();
                 std::set<SwRootFrm*> aAllLayouts = pTargetShell->GetDoc()->GetAllLayouts();
-                std::for_each( aAllLayouts.begin(), aAllLayouts.end(),
-                    ::std::bind2nd(::std::mem_fun(&SwRootFrm::FreezeLayout), false));
-                std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::AllCheckPageDescs));
+                std::for_each( aAllLayouts.begin(), aAllLayouts.end(), [](SwRootFrm* pLayout)
+                {
+                    pLayout->FreezeLayout(false);
+                    pLayout->AllCheckPageDescs();
+                });
             }
 
             DELETEZ( pProgressDlg );
--- source/filter/ww8/wrtw8sty.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/filter/ww8/wrtw8sty.cxx	2021-05-12 09:02:23.000000000 -0400
@@ -976,8 +976,8 @@
     /*
      * Write them all to pTableStream
      */
-    ::std::for_each(aFontList.begin(), aFontList.end(),
-        ::std::bind2nd(::std::mem_fun(&wwFont::Write),pTableStream));
+    for ( auto aFont : aFontList )
+        aFont->Write(pTableStream);
 
     /*
      * Write the position and len in the FIB
@@ -996,16 +996,16 @@
 {
     ::std::vector<const wwFont *> aFontList( AsVector() );
 
-    ::std::for_each( aFontList.begin(), aFontList.end(),
-        ::std::bind2nd( ::std::mem_fun( &wwFont::WriteDocx ), &rAttrOutput ) );
+    for ( auto aFont : aFontList )
+        aFont->WriteDocx(&rAttrOutput);
 }
 
 void wwFontHelper::WriteFontTable( const RtfAttributeOutput& rAttrOutput )
 {
     ::std::vector<const wwFont *> aFontList( AsVector() );
 
-    ::std::for_each( aFontList.begin(), aFontList.end(),
-        ::std::bind2nd( ::std::mem_fun( &wwFont::WriteRtf ), &rAttrOutput ) );
+    for ( auto aFont : aFontList )
+        aFont->WriteRtf(&rAttrOutput);
 }
 
 WW8_WrPlc0::WW8_WrPlc0( sal_uLong nOffset )
--- source/core/doc/lineinfo.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/lineinfo.cxx	2021-05-12 09:07:53.000000000 -0400
@@ -35,13 +35,13 @@
          (rNew.IsCountBlankLines() != mpLineNumberInfo->IsCountBlankLines() ||
           rNew.IsRestartEachPage() != mpLineNumberInfo->IsRestartEachPage()) )
     {
-        std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
         pTmpRoot->StartAllAction();
         // FME 2007-08-14 #i80120# Invalidate size, because ChgThisLines()
         // is only (onny may only be) called by the formatting routines
         //pTmpRoot->InvalidateAllCntnt( INV_LINENUM | INV_SIZE );
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::InvalidateAllCntnt), INV_LINENUM | INV_SIZE));
-         pTmpRoot->EndAllAction();
+        for( auto aLayout : GetAllLayouts() )
+            aLayout->InvalidateAllCntnt( INV_LINENUM | INV_SIZE );
+        pTmpRoot->EndAllAction();
     }
     *mpLineNumberInfo = rNew;
     getIDocumentState().SetModified();
@@ -140,9 +140,8 @@
     if( pRoot )
     {
         pRoot->StartAllAction();
-        std::set<SwRootFrm*> aAllLayouts = pDoc->GetAllLayouts();
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::AllAddPaintRect));
-        //pRoot->GetCurrShell()->AddPaintRect( pRoot->Frm() );
+        for( auto aLayout : pDoc->GetAllLayouts() )
+            aLayout->AllAddPaintRect();
         pRoot->EndAllAction();
     }
 }
--- source/core/doc/docftn.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/docftn.cxx	2021-05-12 09:44:41.000000000 -0400
@@ -279,12 +279,15 @@
         {
             std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
             if ( bFtnPos )
-                std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::AllRemoveFtns));
+                for( auto aLayout : aAllLayouts )
+                    aLayout->AllRemoveFtns();
             else
             {
-                std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::UpdateFtnNums));
+                for( auto aLayout : aAllLayouts )
+                    aLayout->UpdateFtnNums();
                 if ( bFtnDesc )
-                    std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::CheckFtnPageDescs), false));
+                    for( auto aLayout : aAllLayouts )
+                        aLayout->CheckFtnPageDescs(false);
                 if ( bExtra )
                 {
                     // For messages regarding ErgoSum etc. we save the extra code and use the
@@ -351,8 +354,8 @@
         {
             if ( bFtnDesc )
             {
-                std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
-                std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::CheckFtnPageDescs), true));
+                for( auto aLayout : GetAllLayouts() )
+                    aLayout->CheckFtnPageDescs(true);
             }
             if ( bExtra )
             {
@@ -487,8 +490,8 @@
         }
         else if( pTmpRoot )
         {
-            std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
-            std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::UpdateFtnNums));
+            for( auto aLayout : GetAllLayouts() )
+                aLayout->UpdateFtnNums();
         }
         getIDocumentState().SetModified();
     }
--- source/core/doc/docdesc.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/docdesc.cxx	2021-05-12 09:50:18.000000000 -0400
@@ -484,8 +484,8 @@
     if ( (bUseOn || bFollow) && pTmpRoot)
         // Inform layout!
     {
-        std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::AllCheckPageDescs));
+        for( auto aLayout : GetAllLayouts() )
+            aLayout->AllCheckPageDescs();
     }
 
     // Take over the page attributes.
@@ -557,8 +557,8 @@
         mpFtnInfo->ChgPageDesc( maPageDescs[0] );
         if ( bHasLayout )
         {
-            std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
-            std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::CheckFtnPageDescs), false));
+            for( auto aLayout : GetAllLayouts() )
+                aLayout->CheckFtnPageDescs(false);
         }
     }
     else if ( mpEndNoteInfo->DependsOn( pDel ) )
@@ -566,8 +566,8 @@
         mpEndNoteInfo->ChgPageDesc( maPageDescs[0] );
         if ( bHasLayout )
         {
-            std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
-            std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::CheckFtnPageDescs), true));
+            for( auto aLayout : GetAllLayouts() )
+                aLayout->CheckFtnPageDescs(true);
         }
     }
 
@@ -578,8 +578,8 @@
             maPageDescs[j]->SetFollow( 0 );
             if( bHasLayout )
             {
-                std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
-                std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::AllCheckPageDescs));
+                for( auto aLayout : GetAllLayouts() )
+                    aLayout->AllCheckPageDescs();
             }
         }
     }
--- source/core/doc/doc.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/doc.cxx	2021-05-12 09:56:35.000000000 -0400
@@ -1137,14 +1137,18 @@
     OSL_ENSURE( getIDocumentLayoutAccess().GetCurrentLayout(), "SpellAgain: Where's my RootFrm?" );
     if( bInvalid )
     {
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::AllInvalidateSmartTagsOrSpelling),bSmartTags));
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::SetNeedGrammarCheck), true) );
+        for ( auto aLayout : aAllLayouts )
+        {
+            aLayout->AllInvalidateSmartTagsOrSpelling(bSmartTags);
+            aLayout->SetNeedGrammarCheck(true);
+        }
         if ( bSmartTags )
             GetNodes().ForEach( lcl_CheckSmartTagsAgain, &bOnlyWrong );
         GetNodes().ForEach( lcl_SpellAndGrammarAgain, &bOnlyWrong );
     }
 
-    std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::SetIdleFlags));
+    for ( auto aLayout : aAllLayouts )
+        aLayout->SetIdleFlags();
 }
 
 void SwDoc::InvalidateAutoCompleteFlag()
@@ -1153,14 +1157,16 @@
     if( pTmpRoot )
     {
         std::set<SwRootFrm*> aAllLayouts = GetAllLayouts();
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::AllInvalidateAutoCompleteWords));
+        for( auto aLayout : aAllLayouts )
+            aLayout->AllInvalidateAutoCompleteWords();
         for( sal_uLong nNd = 1, nCnt = GetNodes().Count(); nNd < nCnt; ++nNd )
         {
             SwTxtNode* pTxtNode = GetNodes()[ nNd ]->GetTxtNode();
             if ( pTxtNode ) pTxtNode->SetAutoCompleteWordDirty( true );
         }
 
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::mem_fun(&SwRootFrm::SetIdleFlags));
+        for( auto aLayout : aAllLayouts )
+            aLayout->SetIdleFlags();
     }
 }
 
--- source/core/doc/DocumentDeviceManager.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/DocumentDeviceManager.cxx	2021-05-12 10:00:54.000000000 -0400
@@ -332,8 +332,8 @@
 
             pFntCache->Flush();
 
-            std::set<SwRootFrm*> aAllLayouts = m_rDoc.GetAllLayouts();
-            std::for_each( aAllLayouts.begin(), aAllLayouts.end(),std::bind2nd(std::mem_fun(&SwRootFrm::InvalidateAllCntnt), INV_SIZE));
+            for(SwRootFrm* aLayout : m_rDoc.GetAllLayouts())
+                aLayout->InvalidateAllCntnt(INV_SIZE);
 
             do
             {
--- source/core/doc/DocumentSettingManager.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/doc/DocumentSettingManager.cxx	2021-05-12 10:03:04.000000000 -0400
@@ -416,8 +416,8 @@
     if( pTmpRoot && !m_rDoc.IsInReading() )
     {
         pTmpRoot->StartAllAction();
-        std::set<SwRootFrm*> aAllLayouts = m_rDoc.GetAllLayouts();
-        std::for_each( aAllLayouts.begin(), aAllLayouts.end(), std::bind2nd(std::mem_fun(&SwRootFrm::InvalidateAllCntnt), INV_SIZE));
+        for(SwRootFrm* aLayout : m_rDoc.GetAllLayouts())
+            aLayout->InvalidateAllCntnt(INV_SIZE);
         pTmpRoot->EndAllAction();
     }
     m_rDoc.getIDocumentState().SetModified();
@@ -486,8 +486,8 @@
         if( pTmpRoot && !m_rDoc.IsInReading() )
         {
             pTmpRoot->StartAllAction();
-            std::set<SwRootFrm*> aAllLayouts = m_rDoc.GetAllLayouts();
-            std::for_each( aAllLayouts.begin(), aAllLayouts.end(), std::bind2nd(std::mem_fun(&SwRootFrm::InvalidateAllCntnt), INV_SIZE));
+            for( auto aLayout : m_rDoc.GetAllLayouts() )
+                aLayout->InvalidateAllCntnt(INV_SIZE);
             pTmpRoot->EndAllAction();
         }
         m_rDoc.getIDocumentState().SetModified();
