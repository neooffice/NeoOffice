--- inc/vtablefactory.hxx	2020-12-17 16:59:38.000000000 -0500
+++ inc/vtablefactory.hxx	2021-04-28 11:03:00.000000000 -0400
@@ -208,7 +208,7 @@
     static void flushCode(
         unsigned char const * begin, unsigned char const * end);
 
-    typedef std::unordered_map< OUString, Vtables > Map;
+    typedef std::unordered_map< OUString, Vtables, OUStringHash > Map;
 
     osl::Mutex m_mutex;
     Map m_map;
--- source/cpp_uno/gcc3_macosx_x86-64/except.cxx	2020-12-17 16:59:38.000000000 -0500
+++ source/cpp_uno/gcc3_macosx_x86-64/except.cxx	2021-04-28 11:03:00.000000000 -0400
@@ -145,7 +145,7 @@
 
 class RTTI
 {
-    typedef std::unordered_map< OUString, std::type_info * > t_rtti_map;
+    typedef std::unordered_map< OUString, std::type_info *, OUStringHash > t_rtti_map;
 
     Mutex m_mutex;
     t_rtti_map m_rttis;
--- source/cpp_uno/shared/vtablefactory.cxx	2020-12-17 16:59:38.000000000 -0500
+++ source/cpp_uno/shared/vtablefactory.cxx	2021-04-28 11:03:00.000000000 -0400
@@ -174,7 +174,7 @@
     sal_Int32 calculate(
         typelib_InterfaceTypeDescription * type, sal_Int32 offset);
 
-    std::unordered_map< OUString, sal_Int32 > m_map;
+    std::unordered_map< OUString, sal_Int32, OUStringHash > m_map;
 };
 
 sal_Int32 VtableFactory::BaseOffset::calculate(
--- source/cpp_uno/gcc3_linux_aarch64/uno2cpp.cxx	2020-12-17 16:59:38.000000000 -0500
+++ source/cpp_uno/gcc3_linux_aarch64/uno2cpp.cxx	2021-04-28 11:02:09.000000000 -0400
@@ -131,7 +131,7 @@
     typelib_MethodParameter * parameters, void * returnValue, void ** arguments,
     uno_Any ** exception)
 {
-    typelib_TypeDescription * rtd = 0;
+    typelib_TypeDescription * rtd = nullptr;
     TYPELIB_DANGER_GET(&rtd, returnType);
     abi_aarch64::ReturnKind retKind = abi_aarch64::getReturnKind(rtd);
     bool retConv = bridges::cpp_uno::shared::relatesToInterfaceType(rtd);
@@ -157,15 +157,15 @@
         if (!parameters[i].bOut &&
             bridges::cpp_uno::shared::isSimpleType(parameters[i].pTypeRef))
         {
-            cppArgs[i] = 0;
+            cppArgs[i] = nullptr;
             switch (parameters[i].pTypeRef->eTypeClass) {
             case typelib_TypeClass_BOOLEAN:
                 pushArgument(
 #ifdef MACOSX
                     parameters[i].pTypeRef->eTypeClass, &subsp,
 #endif
-                    *static_cast<sal_Bool *>(arguments[i]), stack, &sp, gpr,
-                    &ngpr);
+                    static_cast<unsigned long>(*static_cast<sal_Bool *>(arguments[i])), stack, &sp,
+                    gpr, &ngpr);
                 break;
             case typelib_TypeClass_BYTE:
                 pushArgument(
@@ -252,7 +252,7 @@
                 assert(false);
             }
         } else {
-            typelib_TypeDescription * ptd = 0;
+            typelib_TypeDescription * ptd = nullptr;
             TYPELIB_DANGER_GET(&ptd, parameters[i].pTypeRef);
             if (!parameters[i].bIn) {
                 cppArgs[i] = alloca(ptd->nSize);
@@ -277,7 +277,7 @@
                     reinterpret_cast<unsigned long>(cppArgs[i]), stack, &sp,
                     gpr, &ngpr);
             } else {
-                cppArgs[i] = 0;
+                cppArgs[i] = nullptr;
                 pushArgument(
 #ifdef MACOSX
                     typelib_TypeClass_HYPER, &subsp,
@@ -339,7 +339,7 @@
             __cxxabiv1::__cxa_current_exception_type(), *exception,
             proxy->getBridge()->getCpp2Uno());
         for (sal_Int32 i = 0; i != count; ++i) {
-            if (cppArgs[i] != 0) {
+            if (cppArgs[i] != nullptr) {
                 uno_destructData(
                     cppArgs[i], ptds[i],
                     reinterpret_cast<uno_ReleaseFunc>(css::uno::cpp_release));
@@ -349,12 +349,12 @@
         TYPELIB_DANGER_RELEASE(rtd);
         return;
     }
-    *exception = 0;
+    *exception = nullptr;
     for (sal_Int32 i = 0; i != count; ++i) {
-        if (cppArgs[i] != 0) {
+        if (cppArgs[i] != nullptr) {
             if (parameters[i].bOut) {
                 if (parameters[i].bIn) {
-                    uno_destructData(arguments[i], ptds[i], 0);
+                    uno_destructData(arguments[i], ptds[i], nullptr);
                 }
                 uno_copyAndConvertData(
                     arguments[i], cppArgs[i], ptds[i],
@@ -442,14 +442,14 @@
                     typelib_InterfaceAttributeTypeDescription const *>(
                         pMemberDescr);
             VtableSlot slot(getVtableSlot(atd));
-            if (pReturn != 0) { // getter
+            if (pReturn != nullptr) { // getter
                 call(
-                    proxy, slot, atd->pAttributeTypeRef, 0, 0, pReturn, pArgs,
+                    proxy, slot, atd->pAttributeTypeRef, 0, nullptr, pReturn, pArgs,
                     ppException);
             } else { // setter
                 typelib_MethodParameter param = {
-                    0, atd->pAttributeTypeRef, true, false };
-                typelib_TypeDescriptionReference * rtd = 0;
+                    nullptr, atd->pAttributeTypeRef, true, false };
+                typelib_TypeDescriptionReference * rtd = nullptr;
                 typelib_typedescriptionreference_new(
                     &rtd, typelib_TypeClass_VOID, OUString("void").pData);
                 slot.index += 1;
@@ -468,33 +468,33 @@
             switch (slot.index) {
             case 1:
                 pUnoI->acquire(pUnoI);
-                *ppException = 0;
+                *ppException = nullptr;
                 break;
             case 2:
                 pUnoI->release(pUnoI);
-                *ppException = 0;
+                *ppException = nullptr;
                 break;
             case 0:
                 {
-                    typelib_TypeDescription * td = 0;
+                    typelib_TypeDescription * td = nullptr;
                     TYPELIB_DANGER_GET(
                         &td,
-                        (reinterpret_cast<css::uno::Type *>(pArgs[0])
+                        (static_cast<css::uno::Type *>(pArgs[0])
                          ->getTypeLibType()));
-                    if (td != 0) {
-                        uno_Interface * ifc = 0;
+                    if (td != nullptr) {
+                        uno_Interface * ifc = nullptr;
                         proxy->pBridge->getUnoEnv()->getRegisteredInterface(
                             proxy->pBridge->getUnoEnv(),
                             reinterpret_cast<void **>(&ifc), proxy->oid.pData,
                             reinterpret_cast<
                                 typelib_InterfaceTypeDescription *>(td));
-                        if (ifc != 0) {
+                        if (ifc != nullptr) {
                             uno_any_construct(
-                                reinterpret_cast<uno_Any *>(pReturn), &ifc, td,
-                                0);
+                                static_cast<uno_Any *>(pReturn), &ifc, td,
+                                nullptr);
                             ifc->release(ifc);
                             TYPELIB_DANGER_RELEASE(td);
-                            *ppException = 0;
+                            *ppException = nullptr;
                             break;
                         }
                         TYPELIB_DANGER_RELEASE(td);
--- source/cpp_uno/gcc3_linux_aarch64/abi.cxx	2020-12-17 16:59:38.000000000 -0500
+++ source/cpp_uno/gcc3_linux_aarch64/abi.cxx	2021-04-28 11:03:00.000000000 -0400
@@ -21,6 +21,7 @@
 
 #include <cassert>
 #include <cstddef>
+#include <cstdint>
 #include <cstring>
 #include <typeinfo>
 
@@ -31,7 +32,6 @@
 #include <rtl/strbuf.hxx>
 #include <rtl/ustrbuf.hxx>
 #include <rtl/ustring.hxx>
-#include <sal/log.hxx>
 #include <sal/types.h>
 #include <typelib/typeclass.h>
 #include <typelib/typedescription.h>
@@ -45,7 +45,7 @@
 namespace {
 
 OUString toUnoName(char const * name) {
-    assert(name != 0);
+    assert(name != nullptr);
     OUStringBuffer b;
     bool scoped = *name == 'N';
     if (scoped) {
@@ -74,14 +74,14 @@
 
 class Rtti {
 public:
-    Rtti(): app_(dlopen(0, RTLD_LAZY)) {}
+    Rtti(): app_(dlopen(nullptr, RTLD_LAZY)) {}
 
     ~Rtti() { dlclose(app_); }
 
     std::type_info * getRtti(typelib_TypeDescription const & type);
 
 private:
-    typedef std::unordered_map<OUString, std::type_info *> Map;
+    typedef std::unordered_map<OUString, std::type_info *, OUStringHash > Map;
 
     void * app_;
 
@@ -107,44 +107,29 @@
         OString sym(b.makeStringAndClear());
         std::type_info * rtti = static_cast<std::type_info *>(
             dlsym(app_, sym.getStr()));
+        if (rtti == nullptr) {
+            char const * rttiName = strdup(sym.getStr() + std::strlen("_ZTI"));
+            if (rttiName == nullptr) {
+                throw std::bad_alloc();
+            }
 #if defined MACOSX
-
-        // Horrible but hopefully temporary hack.
-
-        // For some reason, with the Xcode 12 betas, when compiling for arm64-apple-macos, the
-        // symbols for the typeinfos for the UNO exception types
-        // (_ZTIN3com3sun4star3uno16RuntimeExceptionE etc) end up as "weak private external" in the
-        // object file, as displayed by "nm -f darwin". We try to look them up with dlsym() above,
-        // but that then fails. So use a hackaround... introduce separate real variables (see end of
-        // this file) that point to these typeinfos.
-
-        // When compiling for x86_64-apple-macos, the typeinfo symbols end up as "weak external"
-        // which is fine.
-
-        if (rtti == nullptr)
-        {
-            const OString ptrSym = "ptr" + sym;
-            auto ptr = static_cast<std::type_info **>(dlsym(app_, ptrSym.getStr()));
-            if (ptr != nullptr)
-                rtti = *ptr;
-            else
-                SAL_WARN("bridges", dlerror());
-        }
+            // For the Apple ARM64 ABI, if the most significant ("non-unique RTTI") bit is set, it
+            // means that the instance of the name is not unique (and thus RTTI equality needs to be
+            // determined by string comparison rather than by pointer comparison):
+            rttiName = reinterpret_cast<char const *>(
+                reinterpret_cast<std::uintptr_t>(rttiName) | 0x8000000000000000);
 #endif
-
-        if (rtti == 0) {
-            char const * rttiName = sym.getStr() + std::strlen("_ZTI");
             assert(type.eTypeClass == typelib_TypeClass_EXCEPTION);
             typelib_CompoundTypeDescription const & ctd
                 = reinterpret_cast<typelib_CompoundTypeDescription const &>(
                     type);
-            if (ctd.pBaseTypeDescription == 0) {
-                rtti = new __cxxabiv1::__class_type_info(strdup(rttiName));
+            if (ctd.pBaseTypeDescription == nullptr) {
+                rtti = new __cxxabiv1::__class_type_info(rttiName);
             } else {
                 std::type_info * base = getRtti(
                     ctd.pBaseTypeDescription->aBase);
                 rtti = new __cxxabiv1::__si_class_type_info(
-                    strdup(rttiName),
+                    rttiName,
                     static_cast<__cxxabiv1::__class_type_info *>(base));
             }
         }
@@ -216,9 +201,9 @@
 #endif
     assert(header->exceptionDestructor == &deleteException);
     OUString unoName(toUnoName(header->exceptionType->name()));
-    typelib_TypeDescription * td = 0;
+    typelib_TypeDescription * td = nullptr;
     typelib_typedescription_getByName(&td, unoName.pData);
-    assert(td != 0);
+    assert(td != nullptr);
     uno_destructData(exception, td, &css::uno::cpp_release);
     typelib_typedescription_release(td);
 }
@@ -229,7 +214,7 @@
 };
 
 StructKind getStructKind(typelib_CompoundTypeDescription const * type) {
-    StructKind k = type->pBaseTypeDescription == 0
+    StructKind k = type->pBaseTypeDescription == nullptr
         ? STRUCT_KIND_EMPTY : getStructKind(type->pBaseTypeDescription);
     for (sal_Int32 i = 0; i != type->nMembers; ++i) {
         StructKind k2 = StructKind();
@@ -261,7 +246,7 @@
             break;
         case typelib_TypeClass_STRUCT:
             {
-                typelib_TypeDescription * td = 0;
+                typelib_TypeDescription * td = nullptr;
                 TYPELIB_DANGER_GET(&td, type->ppTypeRefs[i]);
                 k2 = getStructKind(
                     reinterpret_cast<typelib_CompoundTypeDescription const *>(
@@ -304,12 +289,12 @@
 void mapException(
     __cxxabiv1::__cxa_exception * exception, std::type_info const * type, uno_Any * any, uno_Mapping * mapping)
 {
-    assert(exception != 0);
+    assert(exception != nullptr);
     assert(type != nullptr);
     OUString unoName(toUnoName(type->name()));
-    typelib_TypeDescription * td = 0;
+    typelib_TypeDescription * td = nullptr;
     typelib_typedescription_getByName(&td, unoName.pData);
-    if (td == 0) {
+    if (td == nullptr) {
         css::uno::RuntimeException e("exception type not found: " + unoName);
         uno_type_any_constructAndConvert(
             any, &e,
@@ -322,15 +307,15 @@
 }
 
 void raiseException(uno_Any * any, uno_Mapping * mapping) {
-    typelib_TypeDescription * td = 0;
+    typelib_TypeDescription * td = nullptr;
     TYPELIB_DANGER_GET(&td, any->pType);
-    if (td == 0) {
+    if (td == nullptr) {
         throw css::uno::RuntimeException(
-            "no typedescription for " + OUString(any->pType->pTypeName));
+            "no typedescription for " + OUString::unacquired(&any->pType->pTypeName));
     }
     void * exc = __cxxabiv1::__cxa_allocate_exception(td->nSize);
     uno_copyAndConvertData(exc, any->pData, td, mapping);
-    uno_any_destruct(any, 0);
+    uno_any_destruct(any, nullptr);
     std::type_info * rtti = getRtti(*td);
     TYPELIB_DANGER_RELEASE(td);
     __cxxabiv1::__cxa_throw(exc, rtti, deleteException);
@@ -386,30 +371,4 @@
 
 }
 
-#ifdef MACOSX
-
-// See the comment about the horrible hack above.
-
-// This set of types are compiled based on what 'make check' needs, but I haven't been able to run
-// it completely yet. And of course as such this hack isn't a viable long-term solution.
-
-#include <com/sun/star/lang/IllegalArgumentException.hpp>
-#include <com/sun/star/task/ClassifiedInteractionRequest.hpp>
-#include <com/sun/star/ucb/InteractiveAugmentedIOException.hpp>
-#include <com/sun/star/ucb/InteractiveIOException.hpp>
-#include <com/sun/star/ucb/NameClashException.hpp>
-#include <com/sun/star/uno/Exception.hpp>
-
-extern "C" {
-    const std::type_info* __attribute((visibility("default"),used)) ptr_ZTIN3com3sun4star4lang24IllegalArgumentExceptionE = &typeid(css::lang::IllegalArgumentException);
-    const std::type_info* __attribute((visibility("default"),used)) ptr_ZTIN3com3sun4star3uno9ExceptionE = &typeid(css::uno::Exception);
-    const std::type_info* __attribute((visibility("default"),used)) ptr_ZTIN3com3sun4star3uno16RuntimeExceptionE = &typeid(css::uno::RuntimeException);
-    const std::type_info* __attribute((visibility("default"),used)) ptr_ZTIN3com3sun4star3ucb31InteractiveAugmentedIOExceptionE = &typeid(css::ucb::InteractiveAugmentedIOException);
-    const std::type_info* __attribute((visibility("default"),used)) ptr_ZTIN3com3sun4star3ucb22InteractiveIOExceptionE = &typeid(css::ucb::InteractiveIOException);
-    const std::type_info* __attribute((visibility("default"),used)) ptr_ZTIN3com3sun4star3ucb18NameClashExceptionE = &typeid(css::ucb::NameClashException);
-    const std::type_info* __attribute((visibility("default"),used)) ptr_ZTIN3com3sun4star4task28ClassifiedInteractionRequestE = &typeid(css::task::ClassifiedInteractionRequest);
-}
-
-#endif
-
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
--- source/cpp_uno/gcc3_linux_aarch64/cpp2uno.cxx	2020-12-17 16:59:38.000000000 -0500
+++ source/cpp_uno/gcc3_linux_aarch64/cpp2uno.cxx	2022-03-28 15:15:43.000000000 -0400
@@ -41,8 +41,7 @@
 #include <vtablefactory.hxx>
 
 #include "abi.hxx"
-
-extern "C" void vtableSlotCall();
+#include "vtablecall.hxx"
 
 namespace {
 
@@ -53,16 +52,16 @@
     typelib_MethodParameter * parameters, unsigned long * gpr,
     unsigned long * fpr, unsigned long * stack, void * indirectRet)
 {
-    typelib_TypeDescription * rtd = 0;
-    if (returnType != 0) {
+    typelib_TypeDescription * rtd = nullptr;
+    if (returnType != nullptr) {
         TYPELIB_DANGER_GET(&rtd, returnType);
     }
-    abi_aarch64::ReturnKind retKind = rtd == 0
+    abi_aarch64::ReturnKind retKind = rtd == nullptr
         ? abi_aarch64::RETURN_KIND_REG : abi_aarch64::getReturnKind(rtd);
-    bool retConv = rtd != 0
+    bool retConv = rtd != nullptr
         && bridges::cpp_uno::shared::relatesToInterfaceType(rtd);
     void * retin = retKind == abi_aarch64::RETURN_KIND_INDIRECT && !retConv
-        ? indirectRet : rtd == 0 ? 0 : alloca(rtd->nSize);
+        ? indirectRet : rtd == nullptr ? nullptr : alloca(rtd->nSize);
     void ** args = static_cast< void ** >(alloca(count * sizeof (void *)));
     void ** cppArgs = static_cast< void ** >(alloca(count * sizeof (void *)));
     typelib_TypeDescription ** argtds = static_cast<typelib_TypeDescription **>(
@@ -88,7 +87,7 @@
                 }
                 else
                 {
-                    args[i] = reinterpret_cast<void **>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
+                    args[i] = reinterpret_cast<void *>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
                     subsp += 1;
                     if (subsp == 8)
                     {
@@ -113,7 +112,7 @@
                         sp++;
                         subsp = 0;
                     }
-                    args[i] = reinterpret_cast<void **>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
+                    args[i] = reinterpret_cast<void *>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
                     subsp += 2;
                     if (subsp == 8)
                     {
@@ -138,7 +137,7 @@
                         sp++;
                         subsp = 0;
                     }
-                    args[i] = reinterpret_cast<void **>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
+                    args[i] = reinterpret_cast<void *>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
                     subsp += 4;
                     if (subsp == 8)
                     {
@@ -179,7 +178,7 @@
                         sp++;
                         subsp = 0;
                     }
-                    args[i] = reinterpret_cast<void **>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
+                    args[i] = reinterpret_cast<void *>(reinterpret_cast<uintptr_t>(stack + sp) + subsp);
                     subsp += 4;
                     if (subsp == 8)
                     {
@@ -226,7 +225,7 @@
             default:
                 assert(false);
             }
-            argtds[i] = 0;
+            argtds[i] = nullptr;
         } else {
 #ifdef MACOSX
             if (subsp > 0)
@@ -237,7 +236,7 @@
 #endif
             cppArgs[i] = reinterpret_cast<void *>(
                 ngpr == 8 ? stack[sp++] : gpr[ngpr++]);
-            typelib_TypeDescription * ptd = 0;
+            typelib_TypeDescription * ptd = nullptr;
             TYPELIB_DANGER_GET(&ptd, parameters[i].pTypeRef);
             if (!parameters[i].bIn) {
                 args[i] = alloca(ptd->nSize);
@@ -249,7 +248,7 @@
                 argtds[i] = ptd;
             } else {
                 args[i] = cppArgs[i];
-                argtds[i] = 0;
+                argtds[i] = nullptr;
                 TYPELIB_DANGER_RELEASE(ptd);
             }
         }
@@ -258,22 +257,22 @@
     uno_Any * pexc = &exc;
     proxy->getUnoI()->pDispatcher(
         proxy->getUnoI(), description.get(), retin, args, &pexc);
-    if (pexc != 0) {
+    if (pexc != nullptr) {
         for (sal_Int32 i = 0; i != count; ++i) {
-            if (argtds[i] != 0) {
+            if (argtds[i] != nullptr) {
                 if (parameters[i].bIn) {
-                    uno_destructData(args[i], argtds[i], 0);
+                    uno_destructData(args[i], argtds[i], nullptr);
                 }
                 TYPELIB_DANGER_RELEASE(argtds[i]);
             }
         }
-        if (rtd != 0) {
+        if (rtd != nullptr) {
             TYPELIB_DANGER_RELEASE(rtd);
         }
         abi_aarch64::raiseException(&exc, proxy->getBridge()->getUno2Cpp());
     }
     for (sal_Int32 i = 0; i != count; ++i) {
-        if (argtds[i] != 0) {
+        if (argtds[i] != nullptr) {
             if (parameters[i].bOut) {
                 uno_destructData(
                     cppArgs[i], argtds[i],
@@ -282,25 +281,53 @@
                     cppArgs[i], args[i], argtds[i],
                     proxy->getBridge()->getUno2Cpp());
             }
-            uno_destructData(args[i], argtds[i], 0);
+            uno_destructData(args[i], argtds[i], nullptr);
             TYPELIB_DANGER_RELEASE(argtds[i]);
         }
     }
-    void * retout = 0; // avoid false -Werror=maybe-uninitialized
+    void * retout = nullptr; // avoid false -Werror=maybe-uninitialized
     switch (retKind) {
     case abi_aarch64::RETURN_KIND_REG:
-        switch (rtd == 0 ? typelib_TypeClass_VOID : rtd->eTypeClass) {
+        switch (rtd == nullptr ? typelib_TypeClass_VOID : rtd->eTypeClass) {
         case typelib_TypeClass_VOID:
             break;
+#if defined MACOSX
+        case typelib_TypeClass_BOOLEAN:
+            assert(rtd->nSize == sizeof (bool));
+            *gpr = static_cast<unsigned long>(*static_cast<bool *>(retin));
+            assert(!retConv);
+            break;
+        case typelib_TypeClass_BYTE:
+            assert(rtd->nSize == sizeof (sal_Int8));
+            *gpr = *static_cast<sal_Int8 *>(retin);
+            assert(!retConv);
+            break;
+        case typelib_TypeClass_SHORT:
+            assert(rtd->nSize == sizeof (sal_Int16));
+            *gpr = *static_cast<sal_Int16 *>(retin);
+            assert(!retConv);
+            break;
+        case typelib_TypeClass_UNSIGNED_SHORT:
+            assert(rtd->nSize == sizeof (sal_uInt16));
+            *gpr = *static_cast<sal_uInt16 *>(retin);
+            assert(!retConv);
+            break;
+        case typelib_TypeClass_CHAR:
+            assert(rtd->nSize == sizeof (sal_Unicode));
+            *gpr = *static_cast<sal_Unicode *>(retin);
+            assert(!retConv);
+            break;
+#else
         case typelib_TypeClass_BOOLEAN:
         case typelib_TypeClass_BYTE:
         case typelib_TypeClass_SHORT:
         case typelib_TypeClass_UNSIGNED_SHORT:
+        case typelib_TypeClass_CHAR:
+#endif
         case typelib_TypeClass_LONG:
         case typelib_TypeClass_UNSIGNED_LONG:
         case typelib_TypeClass_HYPER:
         case typelib_TypeClass_UNSIGNED_HYPER:
-        case typelib_TypeClass_CHAR:
         case typelib_TypeClass_ENUM:
             std::memcpy(gpr, retin, rtd->nSize);
             assert(!retConv);
@@ -322,7 +349,7 @@
         }
         break;
     case abi_aarch64::RETURN_KIND_HFA_FLOAT:
-        assert(rtd != 0);
+        assert(rtd != nullptr);
         switch (rtd->nSize) {
         case 16:
             std::memcpy(fpr + 3, static_cast<char *>(retin) + 12, 4);
@@ -342,7 +369,7 @@
         assert(!retConv);
         break;
     case abi_aarch64::RETURN_KIND_HFA_DOUBLE:
-        assert(rtd != 0);
+        assert(rtd != nullptr);
         std::memcpy(fpr, retin, rtd->nSize);
         assert(!retConv);
         break;
@@ -353,14 +380,16 @@
     if (retConv) {
         uno_copyAndConvertData(
             retout, retin, rtd, proxy->getBridge()->getUno2Cpp());
-        uno_destructData(retin, rtd, 0);
+        uno_destructData(retin, rtd, nullptr);
     }
-    if (rtd != 0) {
+    if (rtd != nullptr) {
         TYPELIB_DANGER_RELEASE(rtd);
     }
 }
 
-extern "C" void vtableCall(
+}
+
+void vtableCall(
     sal_Int32 functionIndex, sal_Int32 vtableOffset,
     unsigned long * gpr, unsigned long * fpr, unsigned long  * stack,
     void * indirectRet)
@@ -380,15 +409,15 @@
                 proxy, desc,
                 reinterpret_cast<typelib_InterfaceAttributeTypeDescription *>(
                     desc.get())->pAttributeTypeRef,
-                0, 0, gpr, fpr, stack, indirectRet);
+                0, nullptr, gpr, fpr, stack, indirectRet);
         } else {
             // Setter:
             typelib_MethodParameter param = {
-                0,
+                nullptr,
                 reinterpret_cast<typelib_InterfaceAttributeTypeDescription *>(
                     desc.get())->pAttributeTypeRef,
                 true, false };
-            call(proxy, desc, 0, 1, &param, gpr, fpr, stack, indirectRet);
+            call(proxy, desc, nullptr, 1, &param, gpr, fpr, stack, indirectRet);
         }
         break;
     case typelib_TypeClass_INTERFACE_METHOD:
@@ -401,21 +430,21 @@
             break;
         case 0:
             {
-                typelib_TypeDescription * td = 0;
+                typelib_TypeDescription * td = nullptr;
                 TYPELIB_DANGER_GET(
                     &td,
                     (reinterpret_cast<css::uno::Type *>(gpr[1])
                      ->getTypeLibType()));
-                if (td != 0 && td->eTypeClass == typelib_TypeClass_INTERFACE) {
-                    css::uno::XInterface * ifc = 0;
+                if (td != nullptr && td->eTypeClass == typelib_TypeClass_INTERFACE) {
+                    css::uno::XInterface * ifc = nullptr;
                     proxy->getBridge()->getCppEnv()->getRegisteredInterface(
                         proxy->getBridge()->getCppEnv(),
                         reinterpret_cast<void **>(&ifc), proxy->getOid().pData,
                         reinterpret_cast<typelib_InterfaceTypeDescription *>(
                             td));
-                    if (ifc != 0) {
+                    if (ifc != nullptr) {
                         uno_any_construct(
-                            reinterpret_cast<uno_Any *>(indirectRet), &ifc, td,
+                            static_cast<uno_Any *>(indirectRet), &ifc, td,
                             reinterpret_cast<uno_AcquireFunc>(
                                 css::uno::cpp_acquire));
                         ifc->release();
@@ -443,6 +472,8 @@
     }
 }
 
+namespace {
+
 std::size_t const codeSnippetSize = 8 * 4;
 
 unsigned char * generateCodeSnippet(
@@ -490,8 +521,8 @@
     typelib_InterfaceTypeDescription *)
 {
     Slot * slots = mapBlockToVtable(block);
-    slots[-2].fn = 0;
-    slots[-1].fn = 0;
+    slots[-2].fn = nullptr;
+    slots[-1].fn = nullptr;
     return slots + slotCount;
 }
 
@@ -509,9 +540,9 @@
     (*slots) -= functionCount;
     Slot * s = *slots;
     for (sal_Int32 i = 0; i != type->nMembers; ++i) {
-        typelib_TypeDescription * td = 0;
+        typelib_TypeDescription * td = nullptr;
         TYPELIB_DANGER_GET(&td, type->ppMembers[i]);
-        assert(td != 0);
+        assert(td != nullptr);
         switch (td->eTypeClass) {
         case typelib_TypeClass_INTERFACE_ATTRIBUTE:
             {
@@ -551,7 +582,15 @@
            RTLD_DEFAULT, "__clear_cache");
    (*clear_cache)(begin, end);
 #else
-    __builtin___clear_cache((char*)begin, (char*)end);
+    // GCC clarified with
+    // <http://gcc.gnu.org/git/?p=gcc.git;a=commit;h=a90b0cdd444f6dde1084a439862cf507f6d3b2ae>
+    // "extend.texi (__clear_cache): Correct signature" that __builtin___clear_cache takes void*
+    // parameters, while Clang uses char* ever since
+    // <https://github.com/llvm/llvm-project/commit/c491a8d4577052bc6b3b4c72a7db6a7cfcbc2ed0> "Add
+    // support for __builtin___clear_cache in Clang":
+    __builtin___clear_cache(
+        reinterpret_cast<char *>(const_cast<unsigned char *>(begin)),
+        reinterpret_cast<char *>(const_cast<unsigned char *>(end)));
 #endif
 }
 
--- /dev/null
+++ source/cpp_uno/gcc3_linux_aarch64/vtablecall.hxx
@@ -0,0 +1,33 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; fill-column: 100 -*- */
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+
+#pragma once
+
+#include <sal/config.h>
+
+#include <sal/types.h>
+
+extern "C" {
+void vtableCall(sal_Int32 functionIndex, sal_Int32 vtableOffset, unsigned long* gpr,
+                unsigned long* fpr, unsigned long* stack, void* indirectRet);
+
+void vtableSlotCall();
+}
+
+/* vim:set shiftwidth=4 softtabstop=4 expandtab cinoptions=b1,g0,N-s cinkeys+=0=break: */
