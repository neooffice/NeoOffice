--- source/ui/remotecontrol/BluetoothServer.cxx	2022-10-10 06:15:14.000000000 -0400
+++ source/ui/remotecontrol/BluetoothServer.cxx	2022-10-15 14:16:59.000000000 -0400
@@ -49,6 +49,11 @@
   #include <postmac.h>
   #import "OSXBluetooth.h"
   #include "OSXBluetoothWrapper.hxx"
+
+  #include <dlfcn.h>
+
+  typedef IOReturn IOBluetoothAddServiceDict_Type( CFDictionaryRef aServiceDict, IOBluetoothSDPServiceRecordRef *pOutServiceRecord );
+  typedef IOBluetoothUserNotificationRef IOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications_Type( IOBluetoothUserNotificationCallback aCallback, void *pRefCon, BluetoothRFCOMMChannelID aChannelID, IOBluetoothUserNotificationChannelDirection aDirection );
 #endif
 
 #include "Communicator.hxx"
@@ -1472,9 +1477,15 @@
 
     // Create service
     IOBluetoothSDPServiceRecordRef serviceRecordRef;
-    SAL_WNODEPRECATED_DECLARATIONS_PUSH //TODO: 10.9 IOBluetoothAddServiceDict
-    IOReturn rc = IOBluetoothAddServiceDict(reinterpret_cast<CFDictionaryRef>(dict), &serviceRecordRef);
-    SAL_WNODEPRECATED_DECLARATIONS_POP
+    IOReturn rc = kIOReturnError;
+    void *pLib = dlopen(nullptr, RTLD_LAZY | RTLD_LOCAL);
+    if (pLib)
+    {
+        IOBluetoothAddServiceDict_Type *pIOBluetoothAddServiceDict = (IOBluetoothAddServiceDict_Type *)dlsym(pLib, "IOBluetoothAddServiceDict");
+        if (pIOBluetoothAddServiceDict)
+            rc = pIOBluetoothAddServiceDict(reinterpret_cast<CFDictionaryRef>(dict), &serviceRecordRef);
+        dlclose(pLib);
+    }
 
     SAL_INFO("sdremote.bluetooth", "IOBluetoothAddServiceDict returned " << rc);
 
@@ -1490,11 +1501,20 @@
         [serviceRecord getServiceRecordHandle: &serviceRecordHandle];
 
         // Register callback for incoming connections
-        IOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications(
-            incomingCallback,
-            this,
-            channelID,
-            kIOBluetoothUserNotificationChannelDirectionIncoming);
+        void *pLib = dlopen(nullptr, RTLD_LAZY | RTLD_LOCAL);
+        if (pLib)
+        {
+            IOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications_Type *pIOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications = (IOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications_Type *)dlsym(pLib, "IOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications");
+            if (pIOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications)
+            {
+                pIOBluetoothRegisterForFilteredRFCOMMChannelOpenNotifications(
+                    incomingCallback,
+                    this,
+                    channelID,
+                    kIOBluetoothUserNotificationChannelDirectionIncoming);
+            }
+            dlclose(pLib);
+        }
 
         [serviceRecord release];
     }
