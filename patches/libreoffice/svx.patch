--- source/tbxctrls/tbcontrl.cxx	2016-11-24 17:01:14.000000000 -0800
+++ source/tbxctrls/tbcontrl.cxx	2016-11-24 17:51:10.000000000 -0800
@@ -239,6 +239,16 @@
     ValueSet::MouseButtonUp(rMEvt);
 }
 
+class SAL_DLLPRIVATE SvxFrameWindowState_Impl
+{
+public:
+    const SvxBoxItem        maBorderOuter;
+    const SvxBoxInfoItem    maBorderInner;
+
+                            SvxFrameWindowState_Impl( SvxBoxItem& rBorderOuter, SvxBoxInfoItem& rBorderInner ) : maBorderOuter( rBorderOuter ), maBorderInner( rBorderInner ) {}
+                            ~SvxFrameWindowState_Impl() {}
+};
+
 class SvxFrameWindow_Impl : public SfxPopupWindow
 {
     using FloatingWindow::StateChanged;
@@ -247,6 +257,7 @@
     SvxFrmValueSet_Impl  aFrameSet;
     ImageList       aImgList;
     bool        bParagraphMode;
+    Link            aBorderChangedHdl;
 
     DECL_LINK( SelectHdl, void * );
 
@@ -265,6 +276,7 @@
                                   const SfxPoolItem* pState ) SAL_OVERRIDE;
     virtual SfxPopupWindow* Clone() const SAL_OVERRIDE;
     virtual void    DataChanged( const DataChangedEvent& rDCEvt ) SAL_OVERRIDE;
+    void            SetBorderChangedHdl( const Link& rLink ) { aBorderChangedHdl = rLink; }
 };
 
 class SvxLineWindow_Impl : public SfxPopupWindow
@@ -1696,6 +1708,12 @@
     aBorderInner.QueryValue( a );
     aArgs[1].Value = a;
 
+    if ( aBorderChangedHdl.IsSet() )
+    {
+        SvxFrameWindowState_Impl aBorderState( aBorderOuter, aBorderInner );
+        aBorderChangedHdl.Call( &aBorderState );
+    }
+
     /*  #i33380# DR 2004-09-03 Moved the following line above the Dispatch() call.
         This instance may be deleted in the meantime (i.e. when a dialog is opened
         while in Dispatch()), accessing members will crash in this case. */
@@ -2502,6 +2520,7 @@
         case SID_BACKGROUND_COLOR:
             addStatusListener( OUString( ".uno:BackgroundColor" ));
             mPaletteManager.SetLastColor( COL_YELLOW );
+            bSidebarType = false;
             break;
 
         case SID_ATTR_CHAR_COLOR_BACKGROUND:
@@ -2719,8 +2738,10 @@
     sal_uInt16      nId,
     ToolBox&    rTbx )
     :   SfxToolBoxControl( nSlotId, nId, rTbx )
+    , aCurBorderOuter( SID_ATTR_BORDER_OUTER )
+    , aCurBorderInner( SID_ATTR_BORDER_INNER )
 {
-    rTbx.SetItemBits( nId, ToolBoxItemBits::DROPDOWNONLY | rTbx.GetItemBits( nId ) );
+    rTbx.SetItemBits( nId, ToolBoxItemBits::DROPDOWN | rTbx.GetItemBits( nId ) );
 }
 
 SfxPopupWindowType SvxFrameToolBoxControl::GetPopupWindowType() const
@@ -2739,6 +2760,7 @@
                                FLOATWIN_POPUPMODE_NOAPPFOCUSCLOSE );
     pFrameWin->StartSelection();
     SetPopupWindow( pFrameWin );
+    pFrameWin->SetBorderChangedHdl( LINK( this, SvxFrameToolBoxControl, BorderChangedHdl ) );
 
     return pFrameWin;
 }
@@ -2755,6 +2777,30 @@
                             : TRISTATE_FALSE );
 }
 
+void SvxFrameToolBoxControl::Select(sal_uInt16 /*nSelectModifier*/)
+{
+    Any a;
+    Sequence< PropertyValue > aArgs( 2 );
+    aArgs[0].Name = "OuterBorder";
+    aCurBorderOuter.QueryValue( a );
+    aArgs[0].Value = a;
+    aArgs[1].Name = "InnerBorder";
+    aCurBorderInner.QueryValue( a );
+    aArgs[1].Value = a;
+    Dispatch( ".uno:SetBorderStyle", aArgs );
+}
+
+IMPL_LINK( SvxFrameToolBoxControl, BorderChangedHdl, SvxFrameWindowState_Impl *, pBorderState )
+{
+    if ( pBorderState )
+    {
+        aCurBorderOuter = pBorderState->maBorderOuter;
+        aCurBorderInner = pBorderState->maBorderInner;
+    }
+
+    return 0;
+}
+
 SvxFrameLineStyleToolBoxControl::SvxFrameLineStyleToolBoxControl(
     sal_uInt16          nSlotId,
     sal_uInt16          nId,
--- source/svdraw/svdoole2.cxx	2015-11-25 04:55:38.000000000 -0800
+++ source/svdraw/svdoole2.cxx	2016-12-08 13:30:20.000000000 -0800
@@ -58,7 +58,6 @@
 #include <comphelper/classids.hxx>
 
 #include <sot/formats.hxx>
-#include <sfx2/linkmgr.hxx>
 #include <svtools/transfer.hxx>
 #include <cppuhelper/implbase5.hxx>
 
@@ -588,25 +587,6 @@
     m_xWindow = _xWindow;
 }
 
-
-
-class SdrEmbedObjectLink : public sfx2::SvBaseLink
-{
-    SdrOle2Obj*         pObj;
-
-public:
-                        SdrEmbedObjectLink(SdrOle2Obj* pObj);
-    virtual             ~SdrEmbedObjectLink();
-
-    virtual void        Closed() SAL_OVERRIDE;
-    virtual ::sfx2::SvBaseLink::UpdateResult DataChanged(
-        const OUString& rMimeType, const ::com::sun::star::uno::Any & rValue ) SAL_OVERRIDE;
-
-    bool                Connect() { return GetRealObject() != NULL; }
-};
-
-
-
 SdrEmbedObjectLink::SdrEmbedObjectLink(SdrOle2Obj* pObject):
     ::sfx2::SvBaseLink( ::sfx2::LINKUPDATE_ONCALL, SOT_FORMATSTR_ID_SVXB ),
     pObj(pObject)
--- source/unodraw/unoshap4.cxx	2015-11-25 04:55:38.000000000 -0800
+++ source/unodraw/unoshap4.cxx	2016-12-08 13:31:43.000000000 -0800
@@ -416,7 +416,7 @@
     if( xObj.is() )
     {
         Rectangle aRect = pOle2Obj->GetLogicRect();
-        if ( aRect.GetWidth() == 100 && aRect.GetHeight() == 100 )
+        if ( aRect.GetWidth() == 101 && aRect.GetHeight() == 101 )
         {
             // TODO/LATER: is it possible that this method is used to create an iconified object?
             // default size
@@ -480,7 +480,7 @@
     if( xObj.is() )
     {
         Rectangle aRect = pOle2Obj->GetLogicRect();
-        if ( aRect.GetWidth() == 100 && aRect.GetHeight() == 100 )
+        if ( aRect.GetWidth() == 101 && aRect.GetHeight() == 101 )
         {
             // default size
             try
--- source/inc/fmitems.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/inc/fmitems.hxx	2021-05-04 17:24:26.000000000 -0400
@@ -36,8 +36,6 @@
         ,xInterface( rxInterface )
     {}
 
-    inline FmInterfaceItem&  operator=( const FmInterfaceItem &rCpy );
-
     // "pure virtual Methoden" vom SfxPoolItem
     virtual bool            operator==( const SfxPoolItem& ) const SAL_OVERRIDE;
 
@@ -48,14 +46,6 @@
     const ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >         GetInterface() const { return xInterface; }
 };
 
-inline FmInterfaceItem& FmInterfaceItem::operator=( const FmInterfaceItem &rCpy )
-{
-    xInterface = rCpy.xInterface;
-
-    return *this;
-}
-
-
 
 #endif // INCLUDED_SVX_SOURCE_INC_FMITEMS_HXX
 
--- source/dialog/rulritem.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/dialog/rulritem.cxx	2021-05-10 07:52:20.000000000 -0400
@@ -650,14 +650,6 @@
     nEndMax  (0)
 {}
 
-SvxColumnDescription::SvxColumnDescription(const SvxColumnDescription &rCopy) :
-    nStart   (rCopy.nStart),
-    nEnd     (rCopy.nEnd),
-    bVisible (rCopy.bVisible),
-    nEndMin  (rCopy.nEndMin),
-    nEndMax  (rCopy.nEndMax)
-{}
-
 SvxColumnDescription::SvxColumnDescription(long start, long end, bool bVis) :
     nStart   (start),
     nEnd     (end),
--- source/xoutdev/xtable.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/xoutdev/xtable.cxx	2021-05-10 08:37:13.000000000 -0400
@@ -42,12 +42,6 @@
 {
 }
 
-XColorEntry::XColorEntry(const XColorEntry& rOther)
-:   XPropertyEntry(rOther),
-aColor(rOther.aColor)
-{
-}
-
 XLineEndEntry::XLineEndEntry(const basegfx::B2DPolyPolygon& rB2DPolyPolygon, const OUString& rName)
 :   XPropertyEntry(rName),
     aB2DPolyPolygon(rB2DPolyPolygon)
--- source/svdraw/svdotextpathdecomposition.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/svdraw/svdotextpathdecomposition.cxx	2021-05-12 12:42:03.000000000 -0400
@@ -496,7 +496,7 @@
                                     double fDXOffset= *(pCandidate->getDoubleDXArray().begin() + (nPortionIndex - 1));
                                     ::std::transform(
                                         aNewDXArray.begin(), aNewDXArray.end(),
-                                        aNewDXArray.begin(), ::std::bind2nd(::std::minus<double>(), fDXOffset));
+                                        aNewDXArray.begin(), [fDXOffset](double x) { return x - fDXOffset; });
                                 }
 
                                 if(bAutosizeScale)
@@ -504,7 +504,7 @@
                                     // when autosize scaling, adapt to DXArray, too
                                     ::std::transform(
                                         aNewDXArray.begin(), aNewDXArray.end(),
-                                        aNewDXArray.begin(), ::std::bind2nd(::std::multiplies<double>(), fAutosizeScaleFactor));
+                                        aNewDXArray.begin(), [fAutosizeScaleFactor](double x) { return x * fAutosizeScaleFactor; });
                                 }
                             }
 
