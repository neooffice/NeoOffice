--- configure.ac	2015-11-25 07:55:38.000000000 -0500
+++ configure.ac	2022-03-23 09:16:12.000000000 -0400
@@ -538,6 +538,10 @@
 INSTROOTSUFFIX=
 SDKDIRNAME=sdk
 
+HOST_PLATFORM="$host"
+
+host_cpu_for_clang="$host_cpu"
+
 case "$host_os" in
 
 solaris*)
@@ -660,6 +664,19 @@
 
     # -undefined error is the default
     LINKFLAGSNOUNDEFS=""
+    case "$host_cpu" in
+    aarch64|arm64)
+        case "$host_os" in
+        macos*)
+            # HOST_PLATFORM is used for external projects and their configury occasionally doesn't like
+            # the "macos" part so be sure to use aarch64-apple-darwin for now.
+            HOST_PLATFORM=aarch64-apple-darwin
+            ;;
+        esac
+
+        # Apple's Clang uses "arm64"
+        host_cpu_for_clang=arm64
+    esac
 ;;
 
 freebsd*)
@@ -776,6 +793,8 @@
     ;;
 esac
 
+AC_SUBST(HOST_PLATFORM)
+
 if echo "$host_os" | grep -q linux-android ; then
     if test -z "$with_android_sdk"; then
         AC_MSG_ERROR([the --with-android-sdk option is mandatory])
@@ -1670,6 +1689,11 @@
          driver. If fb_config is not in PATH, use FBCONFIG to point to it.]),,
     [with_system_firebird="$with_system_libs"])
 
+AC_ARG_WITH(system-libtommath,
+            AS_HELP_STRING([--with-system-libtommath],
+                           [Use libtommath already on system]),,
+            [with_system_libtommath="$with_system_libs"])
+
 AC_ARG_WITH(system-hsqldb,
     AS_HELP_STRING([--with-system-hsqldb],
         [Use hsqldb already on system.]))
@@ -2291,7 +2315,7 @@
     [
                           Usage:     --with-macosx-sdk=<version>
 
-                          e. g.: --with-macosx-sdk=10.8
+                          e. g.: --with-macosx-sdk=11.0
 
                           there are 3 options to control the MacOSX build:
                           --with-macosx-sdk (referred as 'sdk' below)
@@ -2305,15 +2329,15 @@
                           ==========================================
                            command line      || config result
                           ==========================================
-                          min  | max  | sdk  || min  | max  | sdk  |
-                          ?    | ?    | ?    || 10.8 | 10.s | 10.s |
-                          ?    | ?    | 10.x || 10.8 | 10.x | 10.x |
-                          ?    | 10.x | ?    || 10.8 | 10.s | 10.s |
-                          ?    | 10.x | 10.y || 10.8 | 10.x | 10.y |
-                          10.x | ?    | ?    || 10.x | 10.s | 10.s |
-                          10.x | ?    | 10.y || 10.x | 10.y | 10.y |
-                          10.x | 10.y | ?    || 10.x | 10.y | 10.y |
-                          10.x | 10.y | 10.z || 10.x | 10.y | 10.z |
+                          min  | max  | sdk  || min   | max  | sdk  |
+                          ?    | ?    | ?    || 11.0 | 10.s | 10.s |
+                          ?    | ?    | 10.x || 11.0 | 10.x | 10.x |
+                          ?    | 10.x | ?    || 11.0 | 10.s | 10.s |
+                          ?    | 10.x | 10.y || 11.0 | 10.x | 10.y |
+                          10.x | ?    | ?    || 10.x  | 10.s | 10.s |
+                          10.x | ?    | 10.y || 10.x  | 10.y | 10.y |
+                          10.x | 10.y | ?    || 10.x  | 10.y | 10.y |
+                          10.x | 10.y | 10.z || 10.x  | 10.y | 10.z |
 
 
                           see: http://developer.apple.com/library/mac/#technotes/tn2064/_index.html
@@ -2329,7 +2353,7 @@
     [
                           Usage:     --with-macosx-version-min-required=<version>
 
-                          e. g.: --with-macos-version-min-required=10.8
+                          e. g.: --with-macos-version-min-required=11.0
                           see --with-macosx-sdk for more info
     ],
 ,)
@@ -2340,7 +2364,7 @@
     [
                           Usage:     --with-macosx-version-max-allowed=<version>
 
-                          e. g.: --with-macos-version-max-allowed=10.8
+                          e. g.: --with-macos-version-max-allowed=11.0
                           see --with-macosx-sdk for more info
     ],
 ,)
@@ -2724,7 +2748,7 @@
 
     AC_MSG_CHECKING([what Mac OS X SDK to use])
 
-    for _macosx_sdk in $with_macosx_sdk 10.8 10.9 10.10 10.11; do
+    for _macosx_sdk in $with_macosx_sdk 11.0 11.1 11.2 11.3 12.0 12.1 12.2 12.3 ; do
         MACOSX_SDK_PATH=`xcrun --sdk macosx${_macosx_sdk} --show-sdk-path 2> /dev/null`
         if test -d "$MACOSX_SDK_PATH"; then
             with_macosx_sdk="${_macosx_sdk}"
@@ -2743,25 +2767,37 @@
     AC_MSG_RESULT([SDK $with_macosx_sdk at $MACOSX_SDK_PATH])
 
     case $with_macosx_sdk in
-    10.8)
-        MACOSX_SDK_VERSION=1080
+    11.0)
+        MACOSX_SDK_VERSION=110000
+        ;;
+    11.1)
+        MACOSX_SDK_VERSION=110100
+        ;;
+    11.2)
+        MACOSX_SDK_VERSION=110200
+        ;;
+    11.3)
+        MACOSX_SDK_VERSION=110300
         ;;
-    10.9)
-        MACOSX_SDK_VERSION=1090
+    12.0)
+        MACOSX_SDK_VERSION=120000
         ;;
-    10.10)
-        MACOSX_SDK_VERSION=101000
+    12.1)
+        MACOSX_SDK_VERSION=120100
         ;;
-    10.11)
-        MACOSX_SDK_VERSION=101100
+    12.2)
+        MACOSX_SDK_VERSION=120200
+        ;;
+    12.3)
+        MACOSX_SDK_VERSION=120300
         ;;
     *)
-        AC_MSG_ERROR([with-macosx-sdk $with_macosx_sdk is not a supported value, supported values are 10.8--11])
+        AC_MSG_ERROR([with-macosx-sdk $with_macosx_sdk is not a supported value, supported values are 11.0 11.1 11.2 11.3 12.0 12.1 12.2 12.3])
         ;;
     esac
 
     if test "$with_macosx_version_min_required" = "" ; then
-        with_macosx_version_min_required="10.8";
+        with_macosx_version_min_required="11.0";
     fi
 
     if test "$with_macosx_version_max_allowed" = "" ; then
@@ -2776,57 +2812,100 @@
     MACOSX_DEPLOYMENT_TARGET="$with_macosx_version_min_required"
 
     case "$with_macosx_version_min_required" in
-    10.8)
-        MAC_OS_X_VERSION_MIN_REQUIRED="1080"
+    11.0)
+        MAC_OS_X_VERSION_MIN_REQUIRED="110000"
+        ;;
+    11.1)
+        MAC_OS_X_VERSION_MIN_REQUIRED="110100"
+        ;;
+    11.2)
+        MAC_OS_X_VERSION_MIN_REQUIRED="110200"
+        ;;
+    11.3)
+        MAC_OS_X_VERSION_MIN_REQUIRED="110300"
         ;;
-    10.9)
-        MAC_OS_X_VERSION_MIN_REQUIRED="1090"
+    12.0)
+        MAC_OS_X_VERSION_MIN_REQUIRED="120000"
         ;;
-    10.10)
-        MAC_OS_X_VERSION_MIN_REQUIRED="101000"
+    12.1)
+        MAC_OS_X_VERSION_MIN_REQUIRED="120100"
         ;;
-    10.11)
-        MAC_OS_X_VERSION_MIN_REQUIRED="101100"
+    12.2)
+        MAC_OS_X_VERSION_MIN_REQUIRED="120200"
+        ;;
+    12.3)
+        MAC_OS_X_VERSION_MIN_REQUIRED="120300"
         ;;
     *)
-        AC_MSG_ERROR([with-macosx-version-min-required $with_macosx_version_min_required is not a supported value, supported values are 10.8--11])
+        AC_MSG_ERROR([with-macosx-version-min-required $with_macosx_version_min_required is not a supported value, supported values are 11.0 11.1 11.2 11.3 12.0 12.1 12.2 12.3])
         ;;
     esac
 
-    LIBTOOL=libtool
+    LIBTOOL=/usr/bin/libtool
     INSTALL_NAME_TOOL=install_name_tool
     if test -z "$save_CC"; then
-        AC_MSG_CHECKING([what compiler to use])
         stdlib=-stdlib=libc++
         if test "$ENABLE_LTO" = TRUE; then
             lto=-flto
         fi
-        CC="`xcrun -find clang` -m64 $lto -mmacosx-version-min=$with_macosx_version_min_required -isysroot $MACOSX_SDK_PATH"
-        CXX="`xcrun -find clang++` -m64 $lto $stdlib -mmacosx-version-min=$with_macosx_version_min_required -isysroot $MACOSX_SDK_PATH"
+
+        AC_MSG_CHECKING([what C compiler to use])
+        CC="`xcrun -find clang`"
+        CC_BASE=`first_arg_basename "$CC"`
+        if test "$host_cpu" = x86_64; then
+            CC+=" -target x86_64-apple-macos"
+        else
+            CC+=" -target arm64-apple-macos"
+        fi
+        CC+=" $lto -mmacosx-version-min=$with_macosx_version_min_required -isysroot $MACOSX_SDK_PATH"
+        AC_MSG_RESULT([$CC])
+
+        AC_MSG_CHECKING([what C++ compiler to use])
+        CXX="`xcrun -find clang++`"
+        CXX_BASE=`first_arg_basename "$CXX"`
+        if test "$host_cpu" = x86_64; then
+            CXX+=" -target x86_64-apple-macos"
+        else
+            CXX+=" -target arm64-apple-macos"
+        fi
+        CXX+=" $lto $stdlib -mmacosx-version-min=$with_macosx_version_min_required -isysroot $MACOSX_SDK_PATH"
+        AC_MSG_RESULT([$CXX])
+
         INSTALL_NAME_TOOL=`xcrun -find install_name_tool`
         AR=`xcrun -find ar`
         NM=`xcrun -find nm`
         STRIP=`xcrun -find strip`
         LIBTOOL=`xcrun -find libtool`
         RANLIB=`xcrun -find ranlib`
-        AC_MSG_RESULT([$CC and $CXX])
     fi
 
     case "$with_macosx_version_max_allowed" in
-    10.8)
-        MAC_OS_X_VERSION_MAX_ALLOWED="1080"
+    11.0)
+        MAC_OS_X_VERSION_MAX_ALLOWED="110000"
+        ;;
+    11.1)
+        MAC_OS_X_VERSION_MAX_ALLOWED="110100"
+        ;;
+    11.2)
+        MAC_OS_X_VERSION_MAX_ALLOWED="110200"
+        ;;
+    11.3)
+        MAC_OS_X_VERSION_MAX_ALLOWED="110300"
         ;;
-    10.9)
-        MAC_OS_X_VERSION_MAX_ALLOWED="1090"
+    12.0)
+        MAC_OS_X_VERSION_MAX_ALLOWED="120000"
         ;;
-    10.10)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101000"
+    12.1)
+        MAC_OS_X_VERSION_MAX_ALLOWED="120100"
         ;;
-    10.11)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101100"
+    12.2)
+        MAC_OS_X_VERSION_MAX_ALLOWED="120200"
+        ;;
+    12.3)
+        MAC_OS_X_VERSION_MAX_ALLOWED="120300"
         ;;
     *)
-        AC_MSG_ERROR([with-macosx-version-max-allowed $with_macosx_version_max_allowed is not a supported value, supported values are 10.8--11])
+        AC_MSG_ERROR([with-macosx-version-max-allowed $with_macosx_version_max_allowed is not a supported value, supported values are 11.0 11.1 11.2 11.3 12.0 12.1 12.2 12.3])
         ;;
     esac
 
@@ -3703,6 +3782,64 @@
 UNOWINREG_DLL="185d60944ea767075d27247c3162b3bc-unowinreg.dll"
 AC_SUBST(UNOWINREG_DLL)
 
+COM_IS_CLANG=
+AC_MSG_CHECKING([whether the compiler is actually Clang])
+AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+    #ifndef __clang__
+    you lose
+    #endif
+    int foo=42;
+    ]])],
+    [AC_MSG_RESULT([yes])
+     COM_IS_CLANG=TRUE],
+    [AC_MSG_RESULT([no])])
+AC_SUBST(COM_IS_CLANG)
+
+CC_PLAIN=$CC
+CLANGVER=
+if test "$COM_IS_CLANG" = TRUE; then
+    AC_MSG_CHECKING([whether Clang is new enough])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+        #if !defined __apple_build_version__
+        #error
+        #endif
+        ]])],
+        [my_apple_clang=yes],[my_apple_clang=])
+    if test "$my_apple_clang" = yes; then
+        AC_MSG_RESULT([assumed yes (Apple Clang)])
+    else
+        if test "$_os" = WINNT; then
+            dnl In which case, assume clang-cl:
+            my_args="/EP /TC"
+            dnl Filter out -FIIntrin.h, which needs to be explicitly stated for
+            dnl clang-cl:
+            CC_PLAIN=
+            for i in $CC; do
+                case $i in
+                -FIIntrin.h)
+                    ;;
+                *)
+                    CC_PLAIN="$CC_PLAIN $i"
+                    ;;
+                esac
+            done
+        else
+            my_args="-E -P"
+        fi
+        clang_version=`echo __clang_major__.__clang_minor__.__clang_patchlevel__ | $CC_PLAIN $my_args - | sed 's/ //g'`
+        CLANG_FULL_VERSION=`echo __clang_version__ | $CC_PLAIN $my_args -`
+        CLANGVER=`echo $clang_version \
+            | $AWK -F. '{ print \$1*10000+(\$2<100?\$2:99)*100+(\$3<100?\$3:99) }'`
+        if test "$CLANGVER" -ge 50002; then
+            AC_MSG_RESULT([yes ($clang_version)])
+        else
+            AC_MSG_ERROR(["$CLANG_FULL_VERSION" is too old or unrecognized, must be at least Clang 5.0.2])
+        fi
+        AC_DEFINE_UNQUOTED(CLANG_VERSION,$CLANGVER)
+        AC_DEFINE_UNQUOTED(CLANG_FULL_VERSION,$CLANG_FULL_VERSION)
+    fi
+fi
+
 #
 # prefix C with ccache if needed
 #
@@ -3974,11 +4111,14 @@
     P_SEP=:
 
     case "$host_cpu" in
-    arm*)
-        CPUNAME=ARM
-        RTL_ARCH=ARM_EABI
-        PLATFORMID=ios_arm
-        OS=IOS
+    aarch64|arm64)
+        if test "$enable_ios_simulator" = "yes"; then
+            OS=iOS
+        else
+            CPUNAME=AARCH64
+            RTL_ARCH=AARCH64
+            PLATFORMID=macosx_arm64
+        fi
         ;;
     i*86)
         AC_MSG_ERROR([Can't build 64-bit code in 32-bit OS])
@@ -4421,6 +4561,7 @@
         solenv/bin/getcompver.awk \
         solenv/inc/langlist.mk \
         android/experimental/LOAndroid3/AndroidManifest.xml.in \
+        download.lst \
         config_host.mk.in \
         Makefile.in \
         lo.xcent.in \
@@ -4558,11 +4699,19 @@
 AC_MSG_CHECKING([whether to turn warnings to errors])
 if test -n "$enable_werror" -a "$enable_werror" != "no"; then
     ENABLE_WERROR="TRUE"
+    PYTHONWARNINGS="error"
     AC_MSG_RESULT([yes])
 else
-    AC_MSG_RESULT([no])
+    if test -n "$LODE_HOME" -a -z "$enable_werror"; then
+        ENABLE_WERROR="TRUE"
+        PYTHONWARNINGS="error"
+        AC_MSG_RESULT([yes])
+    else
+        AC_MSG_RESULT([no])
+    fi
 fi
 AC_SUBST(ENABLE_WERROR)
+AC_SUBST(PYTHONWARNINGS)
 
 dnl Set the ASSERT_ALWAYS_ABORT variable. (Activate --enable-assert-always-abort)
 dnl ===================================================================
@@ -5862,8 +6011,170 @@
     AC_LANG_POP([C++])
 fi
 
+dnl ===================================================================
+dnl GCC features
+dnl ===================================================================
+HAVE_GCC_STACK_CLASH_PROTECTION=
+if test "$GCC" = "yes" -o "$COM_IS_CLANG" = TRUE; then
+    AC_MSG_CHECKING([whether $CC_BASE supports -fstack-clash-protection])
+    save_CFLAGS=$CFLAGS
+    CFLAGS="$CFLAGS -fstack-clash-protection"
+    AC_LINK_IFELSE(
+        [AC_LANG_PROGRAM(, [[return 0;]])],
+        [AC_MSG_RESULT([yes]); HAVE_GCC_STACK_CLASH_PROTECTION=TRUE],
+        [AC_MSG_RESULT([no])])
+    CFLAGS=$save_CFLAGS
+
+    AC_MSG_CHECKING([whether $CC_BASE supports -mno-avx])
+    save_CFLAGS=$CFLAGS
+    CFLAGS="$CFLAGS -Werror -mno-avx"
+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_GCC_AVX=TRUE ],[])
+    CFLAGS=$save_CFLAGS
+    if test "$HAVE_GCC_AVX" = "TRUE"; then
+        AC_MSG_RESULT([yes])
+    else
+        AC_MSG_RESULT([no])
+    fi
+
+    AC_MSG_CHECKING([whether $CC_BASE supports atomic functions])
+    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[
+    int v = 0;
+    if (__sync_add_and_fetch(&v, 1) != 1 ||
+        __sync_sub_and_fetch(&v, 1) != 0)
+        return 1;
+    __sync_synchronize();
+    if (__sync_val_compare_and_swap(&v, 0, 1) != 0 ||
+        v != 1)
+        return 1;
+    return 0;
+]])],[HAVE_GCC_BUILTIN_ATOMIC=TRUE],[])
+    if test "$HAVE_GCC_BUILTIN_ATOMIC" = "TRUE"; then
+        AC_MSG_RESULT([yes])
+        AC_DEFINE(HAVE_GCC_BUILTIN_ATOMIC)
+    else
+        AC_MSG_RESULT([no])
+    fi
+
+    AC_MSG_CHECKING([whether $CXX_BASE defines __base_class_type_info in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cstddef>
+            #include <cxxabi.h>
+            std::size_t f() { return sizeof(__cxxabiv1::__base_class_type_info); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_BASE_CLASS_TYPE_INFO],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE defines __class_type_info in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cstddef>
+            #include <cxxabi.h>
+            std::size_t f() { return sizeof(__cxxabiv1::__class_type_info); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_CLASS_TYPE_INFO],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_allocate_exception in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cxxabi.h>
+            void * f() { return __cxxabiv1::__cxa_allocate_exception(0); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_CXA_ALLOCATE_EXCEPTION],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE defines __cxa_eh_globals in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cstddef>
+            #include <cxxabi.h>
+            std::size_t f() { return sizeof(__cxxabiv1::__cxa_eh_globals); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_CXA_EH_GLOBALS],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE defines __cxa_exception in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cstddef>
+            #include <cxxabi.h>
+            std::size_t f() { return sizeof(__cxxabiv1::__cxa_exception); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_CXA_EXCEPTION],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_get_globals in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cxxabi.h>
+            void * f() { return __cxxabiv1::__cxa_get_globals(); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_CXA_GET_GLOBALS],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_current_exception_type in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cxxabi.h>
+            void * f() { return __cxxabiv1::__cxa_current_exception_type(); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_CXA_CURRENT_EXCEPTION_TYPE],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_throw in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cxxabi.h>
+            void f() { __cxxabiv1::__cxa_throw(0, 0, 0); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_CXA_THROW],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE defines __si_class_type_info in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cstddef>
+            #include <cxxabi.h>
+            std::size_t f() { return sizeof(__cxxabiv1::__si_class_type_info); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_SI_CLASS_TYPE_INFO],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+
+    AC_MSG_CHECKING([whether $CXX_BASE defines __vmi_class_type_info in cxxabi.h])
+    AC_LANG_PUSH([C++])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([
+            #include <cstddef>
+            #include <cxxabi.h>
+            std::size_t f() { return sizeof(__cxxabiv1::__vmi_class_type_info); }
+        ])], [
+            AC_DEFINE([HAVE_CXXABI_H_VMI_CLASS_TYPE_INFO],[1])
+            AC_MSG_RESULT([yes])
+        ], [AC_MSG_RESULT([no])])
+    AC_LANG_POP([C++])
+fi
+
 AC_SUBST(HAVE_GCC_AVX)
 AC_SUBST(HAVE_GCC_BUILTIN_ATOMIC)
+AC_SUBST(HAVE_GCC_STACK_CLASH_PROTECTION)
 
 dnl ===================================================================
 dnl Identify the C++ library
@@ -7543,7 +7854,7 @@
 dnl ===================================================================
 # libcmis requires curl and we can't build curl for iOS
 if test $_os != iOS; then
-    libo_CHECK_SYSTEM_MODULE([libcmis],[CMIS],[libcmis-0.5 >= 0.5.0])
+    libo_CHECK_SYSTEM_MODULE([libcmis],[CMIS],[libcmis-0.5 >= 0.5.2])
     ENABLE_CMIS=TRUE
 else
     ENABLE_CMIS=
@@ -7574,7 +7885,7 @@
 dnl ===================================================================
 dnl Check for system cppunit
 dnl ===================================================================
-if test "$cross_compiling" != "yes"; then
+if test "$_os" != "Android" ; then
     libo_CHECK_SYSTEM_MODULE([cppunit],[CPPUNIT],[cppunit >= 1.12.0])
 fi
 
@@ -7741,18 +8052,26 @@
 AC_SUBST(XMLLINT)
 
 # =====================================================================
-# Checking for a Python interpreter with version >= 2.6.
-# Build and runtime requires Python 3 compatible version (>= 2.6).
+# Checking for a Python interpreter with version >= 3.3.
 # Optionally user can pass an option to configure, i. e.
 # ./configure PYTHON=/usr/bin/python
 # =====================================================================
+if test $_os = Darwin -a "$enable_python" != no -a "$enable_python" != fully-internal -a "$enable_python" != internal -a "$enable_python" != system; then
+    # Only allowed choices for macOS are 'no', 'internal' (default), and 'fully-internal'
+    # unless PYTHON is defined as above which allows 'system'
+    enable_python=internal
+fi
 if test "$build_os" != "cygwin" -a "$enable_python" != fully-internal; then
-    # This allows a lack of system python with no error, we use internal one in that case.
-    AM_PATH_PYTHON([2.6],, [:])
-    # Clean PYTHON_VERSION checked below if cross-compiling
-    PYTHON_VERSION=""
-    if test "$PYTHON" != ":"; then
+    if test -n "$PYTHON"; then
         PYTHON_FOR_BUILD=$PYTHON
+    else
+        # This allows a lack of system python with no error, we use internal one in that case.
+        AM_PATH_PYTHON([3.3],, [:])
+        # Clean PYTHON_VERSION checked below if cross-compiling
+        PYTHON_VERSION=""
+        if test "$PYTHON" != ":"; then
+            PYTHON_FOR_BUILD=$PYTHON
+        fi
     fi
 fi
 AC_SUBST(PYTHON_FOR_BUILD)
@@ -7765,7 +8084,11 @@
         # Python is required to build LibreOffice. In theory we could separate the build-time Python
         # requirement from the choice whether to include Python stuff in the installer, but why
         # bother?
-        AC_MSG_ERROR([Python is required at build time.])
+        if test "$cross_compiling" = yes; then
+            enable_python=system
+        else
+            AC_MSG_ERROR([Python is required at build time.])
+        fi
     fi
     enable_python=no
     AC_MSG_RESULT([none])
@@ -7777,10 +8100,6 @@
     elif test $build_os = cygwin; then
         dnl When building on Windows we don't attempt to use any installed
         dnl "system"  Python.
-        dnl
-        dnl (When cross-compiling to Windows from Linux using the mingw32-cross
-        dnl compiler from OBS, use mingw32-python from OBS, and ditto for other
-        dnl MinGW cross-compilation setups.)
         AC_MSG_RESULT([fully internal])
         enable_python=internal
     elif test "$cross_compiling" = yes; then
@@ -7789,8 +8108,10 @@
     else
         # Unset variables set by the above AM_PATH_PYTHON so that
         # we actually do check anew.
+        AC_MSG_RESULT([])
         unset PYTHON am_cv_pathless_PYTHON ac_cv_path_PYTHON am_cv_python_version am_cv_python_platform am_cv_python_pythondir am_cv_python_pyexecdir
         AM_PATH_PYTHON([3.3],, [:])
+        AC_MSG_CHECKING([which Python to use for Pyuno])
         if test "$PYTHON" = ":"; then
             if test -z "$PYTHON_FOR_BUILD"; then
                 AC_MSG_RESULT([fully internal])
@@ -7813,6 +8134,9 @@
     ;;
 system)
     AC_MSG_RESULT([system])
+    if test "$_os" = Darwin -a -z "$PYTHON"; then
+        AC_MSG_ERROR([--enable-python=system doesn't work on macOS because the version provided is obsolete])
+    fi
     ;;
 *)
     AC_MSG_ERROR([Incorrect --enable-python option])
@@ -7824,17 +8148,6 @@
 fi
 
 if test $enable_python = system; then
-    if test -z "$PYTHON_CFLAGS" -a $_os = Darwin; then
-        python_version=2.7
-        PYTHON=python$python_version
-        if test -d "$FRAMEWORKSHOME/Python.framework/Versions/${python_version}/include/python${python_version}"; then
-            PYTHON_CFLAGS="-I$FRAMEWORKSHOME/Python.framework/Versions/${python_version}/include/python${python_version}"
-            PYTHON_LIBS="-framework Python"
-        else
-            PYTHON_CFLAGS="`$PYTHON-config --includes`"
-            PYTHON_LIBS="`$PYTHON-config --libs`"
-        fi
-    fi
     if test -n "$PYTHON_CFLAGS" -a -n "$PYTHON_LIBS"; then
         # Fallback: Accept these in the environment, or as set above
         # for MacOSX.
@@ -7852,6 +8165,9 @@
         if test -z "$PKG_CONFIG"; then
             PYTHON_CFLAGS="-I$python_include"
             PYTHON_LIBS="-L$python_libdir -lpython$python_version $python_libs"
+        elif $PKG_CONFIG --exists python-$python_version-embed; then
+            PYTHON_CFLAGS="`$PKG_CONFIG --cflags python-$python_version-embed`"
+            PYTHON_LIBS="`$PKG_CONFIG --libs python-$python_version-embed` $python_libs"
         elif $PKG_CONFIG --exists python-$python_version; then
             PYTHON_CFLAGS="`$PKG_CONFIG --cflags python-$python_version`"
             PYTHON_LIBS="`$PKG_CONFIG --libs python-$python_version` $python_libs"
@@ -7859,27 +8175,10 @@
             PYTHON_CFLAGS="-I$python_include"
             PYTHON_LIBS="-L$python_libdir -lpython$python_version $python_libs"
         fi
+        FilterLibs "${PYTHON_LIBS}"
+        PYTHON_LIBS="${filteredlibs}"
     else
         dnl How to find out the cross-compilation Python installation path?
-        dnl Let's hardocode what we know for different distributions for now...
-        for python_version in 2.6; do
-            if test -f ${MINGW_SYSROOT}/include/python${python_version}/Python.h; then
-                PYTHON_CFLAGS="-I${MINGW_SYSROOT}/include/python$python_version"
-                PYTHON_LIBS="-L${MINGW_SYSROOT}/lib -lpython$python_version $python_libs"
-                AC_MSG_CHECKING([for python.exe])
-                libo_MINGW_CHECK_DLL([libpython$python_version])
-                libo_MINGW_CHECK_DLL([libreadline6])
-                libo_MINGW_CHECK_DLL([libtermcap])
-                # could we somehow extract the really mingw python version from
-                # actual distro package?
-                # 2.6.2 currently on OpenSUSE 12.1?
-                # rpm -q mingw32-python => mingw32-python-2.6.2-17.17.noarch
-                PYTHON_VERSION=$python_version.2
-                PYTHON_VERSION_MAJOR=`echo $python_version | cut -d . -f 1`
-                PYTHON_VERSION_MINOR=`echo $python_version | cut -d . -f 2`
-                break
-            fi
-        done
         AC_MSG_CHECKING([for python version])
         AS_IF([test -n "$PYTHON_VERSION"],
               [AC_MSG_RESULT([$PYTHON_VERSION])],
@@ -7887,62 +8186,99 @@
                AC_MSG_ERROR([no usable python found])])
         test -n "$PYTHON_CFLAGS" && break
     fi
+
+    dnl Check if the headers really work
+    save_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$CPPFLAGS $PYTHON_CFLAGS"
+    AC_CHECK_HEADER(Python.h)
+    CPPFLAGS="$save_CPPFLAGS"
+
     # let the PYTHON_FOR_BUILD match the same python installation that
     # provides PYTHON_CFLAGS/PYTHON_LDFLAGS for pyuno, which should be
     # better for PythonTests.
     PYTHON_FOR_BUILD=$PYTHON
 fi
 
+if test "$with_lxml" != no; then
+    if test -z "$PYTHON_FOR_BUILD"; then
+        case $build_os in
+            cygwin)
+                AC_MSG_WARN([No system-provided python lxml, gla11y will only report widget classes and ids])
+                ;;
+            *)
+                if test "$cross_compiling" != yes ; then
+                    BUILD_TYPE="$BUILD_TYPE LXML"
+                fi
+                ;;
+        esac
+    else
+        AC_MSG_CHECKING([for python lxml])
+        if $PYTHON_FOR_BUILD -c "import lxml.etree as ET" 2> /dev/null ; then
+            AC_MSG_RESULT([yes])
+        else
+            case $build_os in
+                cygwin)
+                    AC_MSG_RESULT([no, gla11y will only report widget classes and ids])
+                    ;;
+                *)
+                    if test "$cross_compiling" != yes -a "x$ac_cv_header_Python_h" = "xyes"; then
+                        if test -n ${SYSTEM_LIBXSLT} -o -n ${SYSTEM_LIBXML}; then
+                            AC_MSG_RESULT([no, and no system libxml/libxslt, gla11y will only report widget classes and ids])
+                        else
+                            BUILD_TYPE="$BUILD_TYPE LXML"
+                            AC_MSG_RESULT([no, using internal lxml])
+                        fi
+                    else
+                        AC_MSG_RESULT([no, and system does not provide python development headers, gla11y will only report widget classes and ids])
+                    fi
+                    ;;
+            esac
+        fi
+    fi
+fi
+
 dnl By now enable_python should be "system", "internal" or "no"
 case $enable_python in
 system)
     SYSTEM_PYTHON=TRUE
 
-    if test "$CROSS_COMPILING" != TRUE; then
-        dnl Check if the headers really work
-        save_CPPFLAGS="$CPPFLAGS"
-        CPPFLAGS="$CPPFLAGS $PYTHON_CFLAGS"
-        AC_CHECK_HEADER(Python.h, [],
-           [AC_MSG_ERROR([Python headers not found. You probably want to set both the PYTHON_CFLAGS and PYTHON_LIBS environment variables.])],
-           [])
-        CPPFLAGS="$save_CPPFLAGS"
+    if test "x$ac_cv_header_Python_h" != "xyes"; then
+       AC_MSG_ERROR([Python headers not found. You probably want to set both the PYTHON_CFLAGS and PYTHON_LIBS environment variables.])
+    fi
 
-        AC_LANG_PUSH(C)
-        CFLAGS="$CFLAGS $PYTHON_CFLAGS"
-        AC_MSG_CHECKING([for correct python library version])
-           AC_RUN_IFELSE([AC_LANG_SOURCE([[
+    AC_LANG_PUSH(C)
+    CFLAGS="$CFLAGS $PYTHON_CFLAGS"
+    AC_MSG_CHECKING([for correct python library version])
+       AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <Python.h>
 
 int main(int argc, char **argv) {
-       if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION >= 6) ||
-           (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION >= 3)) return 0;
-       else return 1;
+   if ((PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION >= 3)) return 0;
+   else return 1;
 }
-           ]])],[AC_MSG_RESULT([ok])],[AC_MSG_ERROR([Python >= 3.3 is needed when building with Python 3, or Python >= 2.6 when building with Python 2])],[])
-        CFLAGS=$save_CFLAGS
-        AC_LANG_POP(C)
+       ]])],[AC_MSG_RESULT([ok])],[AC_MSG_ERROR([Python >= 3.3 is needed when building with Python 3])],[AC_MSG_RESULT([skipped; cross-compiling])])
+    AC_LANG_POP(C)
 
-        dnl FIXME Check if the Python library can be linked with, too?
-    fi
+    dnl FIXME Check if the Python library can be linked with, too?
     ;;
 
 internal)
     SYSTEM_PYTHON=
     PYTHON_VERSION_MAJOR=3
-    PYTHON_VERSION_MINOR=3
-    PYTHON_VERSION=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.3
+    PYTHON_VERSION_MINOR=8
+    PYTHON_VERSION=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.10
+    if ! grep -q -i python.*${PYTHON_VERSION} ${SRC_ROOT}/download.lst; then
+        AC_MSG_ERROR([PYTHON_VERSION ${PYTHON_VERSION} but no matching file in download.lst])
+    fi
+    AC_DEFINE_UNQUOTED([PYTHON_VERSION_STRING], [L"${PYTHON_VERSION}"])
     BUILD_TYPE="$BUILD_TYPE PYTHON"
+    if test "$OS" = LINUX -o "$OS" = WNT ; then
+        BUILD_TYPE="$BUILD_TYPE LIBFFI"
+    fi
     # Embedded Python dies without Home set
     if test "$HOME" = ""; then
         export HOME=""
     fi
-    # bz2 tarball and bzip2 is not standard
-    if test -z "$BZIP2"; then
-        AC_PATH_PROG( BZIP2, bzip2)
-        if test -z "$BZIP2"; then
-            AC_MSG_ERROR([the internal Python module has a .tar.bz2. You need bzip2])
-        fi
-    fi
     ;;
 no)
     DISABLE_PYTHON=TRUE
@@ -8179,7 +8515,9 @@
 dnl ===================================================================
 dnl Check for PostgreSQL stuff
 dnl ===================================================================
+AC_MSG_CHECKING([whether to build the PostgreSQL SDBC driver])
 if test "x$enable_postgresql_sdbc" != "xno"; then
+    AC_MSG_RESULT([yes])
     SCPDEFS="$SCPDEFS -DWITH_POSTGRESQL_SDBC"
 
     if test "$with_krb5" = "yes" -a "$enable_openssl" = "no"; then
@@ -8189,9 +8527,9 @@
         AC_MSG_ERROR([GSSAPI needs OpenSSL, but --disable-openssl was given.])
     fi
 
-    AC_MSG_CHECKING([PostgreSQL C interface])
+    postgres_interface=""
     if test "$with_system_postgresql" = "yes"; then
-        AC_MSG_RESULT([external PostgreSQL])
+        postgres_interface="external PostgreSQL"
         SYSTEM_POSTGRESQL=TRUE
         if test "$_os" = Darwin; then
             supp_path=''
@@ -8200,11 +8538,19 @@
             done
         fi
         AC_PATH_PROG(PGCONFIG, pg_config, ,$PATH$pg_supp_path)
-        if test -z "$PGCONFIG"; then
-            AC_MSG_ERROR([pg_config needed; set PGCONFIG if not in PATH])
+        if test -n "$PGCONFIG"; then
+            POSTGRESQL_INC=-I$(${PGCONFIG} --includedir)
+            POSTGRESQL_LIB="-L$(${PGCONFIG} --libdir)"
+        else
+            PKG_CHECK_MODULES(POSTGRESQL, libpq, [
+              POSTGRESQL_INC=$POSTGRESQL_CFLAGS
+              POSTGRESQL_LIB=$POSTGRESQL_LIBS
+            ],[
+              AC_MSG_ERROR([pg_config or 'pkg-config libpq' needed; set PGCONFIG if not in PATH])
+            ])
         fi
-        POSTGRESQL_INC=-I$(${PGCONFIG} --includedir)
-        POSTGRESQL_LIB="-L$(${PGCONFIG} --libdir)"
+        FilterLibs "${POSTGRESQL_LIB}"
+        POSTGRESQL_LIB="${filteredlibs}"
     else
         # if/when anything else than PostgreSQL uses Kerberos,
         # move this out of `test "x$enable_postgresql_sdbc" != "xno"'
@@ -8212,16 +8558,18 @@
         WITH_GSSAPI=
         case "$_os" in
         Darwin)
-            # MacOS X has system MIT Kerberos 5 since 10.4
+            # macOS has system MIT Kerberos 5 since 10.4
             if test "$with_krb5" != "no"; then
                 WITH_KRB5=TRUE
                 save_LIBS=$LIBS
+                # Not sure whether it makes any sense here to search multiple potential libraries; it is not likely
+                # that the libraries where these functions are located on macOS will change, is it?
                 AC_SEARCH_LIBS(com_err, [com_err 'com_err -lssl -lcrypto' krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],
-                    [AC_MSG_ERROR([could not find function 'com_err' required for Kerberos 5, try installing libcom_err devel package])])
+                    [AC_MSG_ERROR([could not find function 'com_err' required for Kerberos 5])])
                 KRB5_LIBS=$LIBS
                 LIBS=$save_LIBS
                 AC_SEARCH_LIBS(krb5_sendauth, [krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],
-                    [AC_MSG_ERROR([could not find function 'krb5_sendauth' required for Kerberos 5, try installing krb5 devel package])])
+                    [AC_MSG_ERROR([could not find function 'krb5_sendauth' required for Kerberos 5])])
                 KRB5_LIBS="$KRB5_LIBS $LIBS"
                 LIBS=$save_LIBS
             fi
@@ -8286,17 +8634,21 @@
 
         if test -n "$with_libpq_path"; then
             SYSTEM_POSTGRESQL=TRUE
-            AC_MSG_RESULT([external libpq])
+            postgres_interface="external libpq"
             POSTGRESQL_LIB="-L${with_libpq_path}/lib/"
             POSTGRESQL_INC=-I"${with_libpq_path}/include/"
         else
             SYSTEM_POSTGRESQL=
-            AC_MSG_RESULT([internal])
+            postgres_interface="internal"
             POSTGRESQL_LIB=""
             POSTGRESQL_INC="%OVERRIDE_ME%"
             BUILD_TYPE="$BUILD_TYPE POSTGRESQL"
         fi
     fi
+
+    AC_MSG_CHECKING([PostgreSQL C interface])
+    AC_MSG_RESULT([$postgres_interface])
+
     if test "${SYSTEM_POSTGRESQL}" = "TRUE"; then
         AC_MSG_NOTICE([checking system PostgreSQL prerequisites])
         save_CFLAGS=$CFLAGS
@@ -8312,6 +8664,8 @@
         LIBS=$save_LIBS
     fi
     BUILD_POSTGRESQL_SDBC=TRUE
+else
+    AC_MSG_RESULT([no])
 fi
 AC_SUBST(WITH_KRB5)
 AC_SUBST(WITH_GSSAPI)
@@ -8325,8 +8679,8 @@
 dnl ===================================================================
 dnl Check for Firebird stuff
 dnl ===================================================================
-ENABLE_FIREBIRD_SDBC=""
-if test "x$enable_firebird_sdbc" = "xyes"; then
+ENABLE_FIREBIRD_SDBC=
+if test "$enable_firebird_sdbc" = "yes" ; then
     SCPDEFS="$SCPDEFS -DWITH_FIREBIRD_SDBC"
 
     dnl ===================================================================
@@ -8339,51 +8693,57 @@
         AC_PATH_PROG(FIREBIRDCONFIG, [fb_config])
         if test -z "$FIREBIRDCONFIG"; then
             AC_MSG_NOTICE([No fb_config -- using pkg-config])
-            PKG_CHECK_MODULES(FIREBIRD, fbembed)
-            FIREBIRD_VERSION=`pkg-config --modversion fbembed`
+            PKG_CHECK_MODULES([FIREBIRD], [fbclient >= 3], [FIREBIRD_PKGNAME=fbclient], [
+                PKG_CHECK_MODULES([FIREBIRD], [fbembed], [FIREBIRD_PKGNAME=fbembed])
+            ])
+            FIREBIRD_VERSION=`pkg-config --modversion "$FIREBIRD_PKGNAME"`
         else
             AC_MSG_NOTICE([fb_config found])
             FIREBIRD_VERSION=`$FIREBIRDCONFIG --version`
             AC_MSG_CHECKING([for Firebird Client library])
             FIREBIRD_CFLAGS=`$FIREBIRDCONFIG --cflags`
             FIREBIRD_LIBS=`$FIREBIRDCONFIG --embedlibs`
+            FilterLibs "${FIREBIRD_LIBS}"
+            FIREBIRD_LIBS="${filteredlibs}"
         fi
         AC_MSG_RESULT([includes `$FIREBIRD_CFLAGS', libraries `$FIREBIRD_LIBS'])
         AC_MSG_CHECKING([Firebird version])
         if test -n "${FIREBIRD_VERSION}"; then
             FIREBIRD_MAJOR=`echo $FIREBIRD_VERSION | cut -d"." -f1`
-            FIREBIRD_MINOR=`echo $FIREBIRD_VERSION | cut -d"." -f2`
-            if test "$FIREBIRD_MAJOR" -eq "2" -a "$FIREBIRD_MINOR" -eq "5"; then
+            if test "$FIREBIRD_MAJOR" -ge "3"; then
                 AC_MSG_RESULT([OK])
             else
-                AC_MSG_ERROR([Ensure firebird 2.5.x is installed])
+                AC_MSG_ERROR([Ensure firebird >= 3 is installed])
             fi
         else
-            __save_CFLAGS="${CFLAGS}"
+            save_CFLAGS="${CFLAGS}"
             CFLAGS="${CFLAGS} ${FIREBIRD_CFLAGS}"
             AC_COMPILE_IFELSE([AC_LANG_SOURCE([[#include <ibase.h>
-#if defined(FB_API_VER) && FB_API_VER == 25
+#if defined(FB_API_VER) && FB_API_VER == 30
+int fb_api_is_30(void) { return 0; }
 #else
 #error "Wrong Firebird API version"
-#endif]])],AC_MSG_RESULT([OK]),AC_MSG_ERROR([Ensure firebird 2.5.x is installed]))
-            CFLAGS="${__save_CFLAGS}"
+#endif]])],AC_MSG_RESULT([OK]),AC_MSG_ERROR([Ensure firebird 3.0.x is installed]))
+            CFLAGS="$save_CFLAGS"
         fi
-        ENABLE_FIREBIRD_SDBC="TRUE"
-    elif test "$enable_database_connectivity" != yes; then
+        ENABLE_FIREBIRD_SDBC=TRUE
+        AC_DEFINE([ENABLE_FIREBIRD_SDBC],1)
+    elif test "$enable_database_connectivity" = no; then
         AC_MSG_RESULT([none])
     elif test "$cross_compiling" = "yes"; then
         AC_MSG_RESULT([none])
     else
-        dnl We need libatomic-ops for any non X86/X64 system
+        dnl Embedded Firebird has version 3.0
+        dnl We need libatomic_ops for any non X86/X64 system
         if test "${CPUNAME}" != INTEL -a "${CPUNAME}" != X86_64; then
             dnl ===================================================================
-            dnl Check for system libatomic-ops
+            dnl Check for system libatomic_ops
             dnl ===================================================================
-            libo_CHECK_SYSTEM_MODULE([libatomic_ops],[ATOMIC_OPS],[atomic_ops >= 0.7.2])
+            libo_CHECK_SYSTEM_MODULE([libatomic_ops],[LIBATOMIC_OPS],[atomic_ops >= 0.7.2])
             if test "$with_system_libatomic_ops" = "yes"; then
                 SYSTEM_LIBATOMIC_OPS=TRUE
                 AC_CHECK_HEADERS(atomic_ops.h, [],
-                [AC_MSG_ERROR(atomic_ops.h not found. install libatomic-ops)], [])
+                [AC_MSG_ERROR(atomic_ops.h not found. install libatomic_ops)], [])
             else
                 SYSTEM_LIBATOMIC_OPS=
                 LIBATOMIC_OPS_CFLAGS="-I${WORKDIR}/UnpackedTarball/libatomic_ops/include"
@@ -8394,11 +8754,26 @@
 
         AC_MSG_RESULT([internal])
         SYSTEM_FIREBIRD=
-        FIREBIRD_CFLAGS="-I${WORKDIR}/UnpackedTarball/firebird/include"
-        FIREBIRD_LIBS="-lfbembed"
+        FIREBIRD_CFLAGS="-I${WORKDIR}/UnpackedTarball/firebird/gen/Release/firebird/include"
+        FIREBIRD_LIBS="-lfbclient"
+
+        if test "$with_system_libtommath" = "yes"; then
+            SYSTEM_LIBTOMMATH=TRUE
+            dnl check for tommath presence
+            save_LIBS=$LIBS
+            AC_CHECK_HEADER(tommath.h,,AC_MSG_ERROR(Include file for tommath not found - please install development tommath package))
+            AC_CHECK_LIB(tommath, mp_init, LIBTOMMATH_LIBS=-ltommath, AC_MSG_ERROR(Library tommath not found - please install development tommath package))
+            LIBS=$save_LIBS
+        else
+            SYSTEM_LIBTOMMATH=
+            LIBTOMMATH_CFLAGS="-I${WORKDIR}/UnpackedTarball/libtommath"
+            LIBTOMMATH_LIBS="-ltommath"
+            BUILD_TYPE="$BUILD_TYPE LIBTOMMATH"
+        fi
 
         BUILD_TYPE="$BUILD_TYPE FIREBIRD"
-        ENABLE_FIREBIRD_SDBC="TRUE"
+        ENABLE_FIREBIRD_SDBC=TRUE
+        AC_DEFINE([ENABLE_FIREBIRD_SDBC],1)
     fi
 fi
 AC_SUBST(ENABLE_FIREBIRD_SDBC)
@@ -8408,8 +8783,9 @@
 AC_SUBST(SYSTEM_FIREBIRD)
 AC_SUBST(FIREBIRD_CFLAGS)
 AC_SUBST(FIREBIRD_LIBS)
-dnl AC_SUBST([TOMMATH_CFLAGS])
-dnl AC_SUBST([TOMMATH_LIBS])
+AC_SUBST(SYSTEM_LIBTOMMATH)
+AC_SUBST(LIBTOMMATH_CFLAGS)
+AC_SUBST(LIBTOMMATH_LIBS)
 
 dnl ===================================================================
 dnl Check for system curl
@@ -8484,15 +8860,11 @@
 if test "$with_system_boost" = "yes"; then
     AC_MSG_RESULT([external])
     SYSTEM_BOOST=TRUE
-    AX_BOOST_BASE(1.47)
+    AX_BOOST_BASE([1.66],,[AC_MSG_ERROR([no suitable Boost found])])
     AX_BOOST_DATE_TIME
+    AX_BOOST_FILESYSTEM
     AX_BOOST_IOSTREAMS
-    mingw_boost_date_time_dll=`echo $BOOST_DATE_TIME_LIB | sed -e 's/^-l//' -e 's/\.dll$//'`
-    libo_MINGW_TRY_DLL([$mingw_boost_date_time_dll])
-    if test -z "$MINGW_BOOST_DATE_TIME_DLL"; then
-        # if not found, try again with 'lib' prefix
-        libo_MINGW_CHECK_DLL([lib$mingw_boost_date_time_dll])
-    fi
+    AX_BOOST_LOCALE
     AC_LANG_PUSH([C++])
     save_CXXFLAGS=$CXXFLAGS
     CXXFLAGS="$CXXFLAGS $BOOST_CPPFLAGS $CXXFLAGS_CXX11"
@@ -8500,28 +8872,21 @@
        [AC_MSG_ERROR(boost/shared_ptr.hpp not found. install boost)], [])
     AC_CHECK_HEADER(boost/spirit/include/classic_core.hpp, [],
        [AC_MSG_ERROR(boost/spirit/include/classic_core.hpp not found. install boost >= 1.36)], [])
-    AC_CHECK_HEADER(boost/function.hpp, [],
-       [AC_MSG_ERROR(boost/function.hpp not found. install boost)], [])
-    AC_MSG_CHECKING([whether boost signals2 works])
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/signals2/signal.hpp>]],
-        [[ boost::signals2::signal<void()> s; s(); ]])],
-        [AC_MSG_RESULT([yes])],
-        [AC_MSG_ERROR([no, install boost >= 1.55 or use --without-system-boost])])
-    CXXFLAGS="$CXXFLAGS -fno-exceptions"
-    AC_MSG_CHECKING([whether boost/function.hpp compiles with -fno-exceptions])
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/function.hpp>
-]], [[]])],[ac_cv_cxx_boost_no_exceptions_broken=no],[ac_cv_cxx_boost_no_exceptions_broken=yes])
-    if test "$ac_cv_cxx_boost_no_exceptions_broken" = "yes"; then
-        AC_MSG_ERROR([no, see https://bugzilla.redhat.com/show_bug.cgi?id=477131])
-    else
-        AC_MSG_RESULT([yes])
-    fi
     CXXFLAGS=$save_CXXFLAGS
     AC_LANG_POP([C++])
+    # this is in m4/ax_boost_base.m4
+    FilterLibs "${BOOST_LDFLAGS}"
+    BOOST_LDFLAGS="${filteredlibs}"
 else
     AC_MSG_RESULT([internal])
     BUILD_TYPE="$BUILD_TYPE BOOST"
     SYSTEM_BOOST=
+    if test "${COM}" = "GCC" -o "${COM_IS_CLANG}" = "TRUE"; then
+        # use warning-suppressing wrapper headers
+        BOOST_CPPFLAGS="-I${SRC_ROOT}/external/boost/include -I${WORKDIR}/UnpackedTarball/boost"
+    else
+        BOOST_CPPFLAGS="-I${WORKDIR}/UnpackedTarball/boost"
+    fi
 fi
 AC_SUBST(SYSTEM_BOOST)
 
@@ -8648,6 +9013,19 @@
 AC_SUBST(MSVC80_DLL_PATH)
 
 dnl ===================================================================
+dnl Check for system NSS
+dnl ===================================================================
+if test "$enable_fuzzers" != "yes"; then
+    libo_CHECK_SYSTEM_MODULE([nss],[NSS],[nss >= 3.9.3 nspr >= 4.8])
+    AC_DEFINE(HAVE_FEATURE_NSS)
+    ENABLE_NSS="TRUE"
+    AC_DEFINE(ENABLE_NSS)
+elif test $_os != iOS ; then
+    with_tls=openssl
+fi
+AC_SUBST(ENABLE_NSS)
+
+dnl ===================================================================
 dnl Check for TLS/SSL and cryptographic implementation to use
 dnl ===================================================================
 AC_MSG_CHECKING([which TLS/SSL and cryptographic implementation to use])
@@ -8656,53 +9034,42 @@
     openssl)
         AC_DEFINE(USE_TLS_OPENSSL)
         TLS=OPENSSL
+        AC_MSG_RESULT([$TLS])
 
         if test "$enable_openssl" != "yes"; then
             AC_MSG_ERROR(["Disabling OpenSSL was requested, but the requested TLS to use is actually OpenSSL."])
         fi
 
         # warn that OpenSSL has been selected but not all TLS code has this option
-        AC_MSG_WARN([TLS/SSL implementation to use is OpenSSL but some code may still be depending on NSS or GNUTLS])
-        add_warning "TLS/SSL implementation to use is OpenSSL but some code may still be depending on NSS or GNUTLS"
+        AC_MSG_WARN([TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS or GNUTLS])
+        add_warning "TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS or GNUTLS"
         ;;
     nss)
         AC_DEFINE(USE_TLS_NSS)
         TLS=NSS
+        AC_MSG_RESULT([$TLS])
+        ;;
+    no)
+        AC_MSG_RESULT([none])
+        AC_MSG_WARN([Skipping TLS/SSL])
         ;;
     *)
+        AC_MSG_RESULT([])
         AC_MSG_ERROR([unsupported implementation $with_tls. Supported are:
 openssl - OpenSSL
 nss - Mozilla's Network Security Services (NSS)
     ])
         ;;
     esac
-elif test $_os = iOS -o $_os = Android; then
-    # We don't build NSS for iOS and Android
-    AC_DEFINE(USE_TLS_OPENSSL)
-    TLS=OPENSSL
 else
     # default to using NSS, it results in smaller oox lib
     AC_DEFINE(USE_TLS_NSS)
     TLS=NSS
+    AC_MSG_RESULT([$TLS])
 fi
-AC_MSG_RESULT([$TLS])
 AC_SUBST(TLS)
 
 dnl ===================================================================
-dnl Check for system NSS
-dnl ===================================================================
-libo_CHECK_SYSTEM_MODULE([nss],[NSS],[nss >= 3.9.3 nspr >= 4.8])
-if test "$with_system_nss" = "yes"; then
-    libo_MINGW_CHECK_DLL([libnspr4])
-    libo_MINGW_CHECK_DLL([libplc4])
-    libo_MINGW_CHECK_DLL([libplds4])
-    libo_MINGW_CHECK_DLL([nss3])
-    libo_MINGW_CHECK_DLL([nssutil3])
-    libo_MINGW_CHECK_DLL([smime3])
-    libo_MINGW_CHECK_DLL([ssl3])
-fi
-
-dnl ===================================================================
 dnl Check for system mozilla headers
 dnl ===================================================================
 HAVE_NON_CONST_NPP_GETMIMEDESCRIPTION=
@@ -9246,12 +9613,8 @@
 dnl raptor2: need at least 2.0.7 for CVE-2012-0037
 libo_CHECK_SYSTEM_MODULE([redland],[REDLAND],[redland >= 1.0.8 raptor2 >= 2.0.7])
 if test "$with_system_redland" = "yes"; then
-    libo_MINGW_CHECK_DLL([librdf])
     AC_CHECK_LIB([rdf], [librdf_world_set_raptor_init_handler], [:],
             [AC_MSG_ERROR(librdf too old. Need >= 1.0.16)], [])
-    libo_MINGW_TRY_DLL([libraptor])
-    libo_MINGW_TRY_DLL([librasqal])
-    libo_MINGW_TRY_DLL([libsqlite3])
 else
     RAPTOR_MAJOR="0"
     RASQAL_MAJOR="3"
@@ -11843,7 +12206,7 @@
 dnl Test whether to build libpng or rely on the system version
 dnl ===================================================================
 
-libo_CHECK_SYSTEM_MODULE([libpng],[LIBPNG],[libpng],["-I${WORKDIR}/UnpackedTarball/png"],["-L${WORKDIR}/LinkTarget/StaticLibrary -lpng"])
+libo_CHECK_SYSTEM_MODULE([libpng],[LIBPNG],[libpng],["-I${WORKDIR}/UnpackedTarball/libpng"],["-L${WORKDIR}/LinkTarget/StaticLibrary -llibpng"])
 
 dnl ===================================================================
 dnl Check for runtime JVM search path
@@ -12819,6 +13182,7 @@
                  ios/lo.xcconfig])
 AC_CONFIG_HEADERS([config_host/config_buildid.h])
 AC_CONFIG_HEADERS([config_host/config_clang.h])
+AC_CONFIG_HEADERS([config_host/config_cxxabi.h])
 AC_CONFIG_HEADERS([config_host/config_eot.h])
 AC_CONFIG_HEADERS([config_host/config_features.h])
 AC_CONFIG_HEADERS([config_host/config_folders.h])
