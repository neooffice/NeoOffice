--- source/ui/report/ReportController.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/ui/report/ReportController.cxx	2021-05-12 13:26:09.000000000 -0400
@@ -186,15 +186,6 @@
 
 namespace
 {
-    // comparing two PropertyValue instances
-    struct PropertyValueCompare : public ::std::binary_function< beans::PropertyValue, OUString , bool >
-    {
-        bool operator() (const beans::PropertyValue& x, const OUString& y) const
-        {
-            return x.Name.equals(y);
-        }
-    };
-
     void lcl_setFontWPU_nothrow(const uno::Reference< report::XReportControlFormat>& _xReportControlFormat,const sal_Int32 _nId)
     {
         if ( _xReportControlFormat.is() )
@@ -4020,7 +4011,10 @@
         const OUString sKeyModifier("KeyModifier");
         const beans::PropertyValue* pIter = _aArgs.getConstArray();
         const beans::PropertyValue* pEnd  = pIter + _aArgs.getLength();
-        const beans::PropertyValue* pKeyModifier = ::std::find_if(pIter,pEnd,::std::bind2nd(PropertyValueCompare(),boost::cref(sKeyModifier)));
+        const beans::PropertyValue* pKeyModifier = ::std::find_if(pIter, pEnd,
+            [&sKeyModifier] (const beans::PropertyValue& x) -> bool {
+                return x.Name.equals(sKeyModifier);
+            });
         sal_Int16 nKeyModifier = 0;
         if ( pKeyModifier == pEnd || ((pKeyModifier->Value >>= nKeyModifier) && nKeyModifier == KEY_MOD1) )
         {
--- source/ui/inspection/GeometryHandler.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/ui/inspection/GeometryHandler.cxx	2021-05-12 13:38:49.000000000 -0400
@@ -119,15 +119,6 @@
 using namespace ::com::sun::star;
 
 namespace{
-// comparing two property instances
-struct PropertyCompare : public ::std::binary_function< beans::Property, OUString , bool >
-{
-    bool operator() (const beans::Property& x, const OUString& y) const
-    {
-        return x.Name.equals(y);
-    }
-};
-
 
 OUString lcl_getQuotedFunctionName(const OUString& _sFunction)
 {
@@ -921,7 +912,10 @@
     uno::Sequence< beans::Property > aProps = getSupportedProperties();
     const beans::Property* pIter = aProps.getConstArray();
     const beans::Property* pEnd  = pIter + aProps.getLength();
-    const beans::Property* pFind = ::std::find_if(pIter,pEnd,::std::bind2nd(PropertyCompare(),boost::cref(PropertyName)));
+    const beans::Property* pFind = ::std::find_if(pIter, pEnd,
+            [&PropertyName] (const beans::Property& x) -> bool {
+                return x.Name.equals(PropertyName);
+            });
     if ( pFind == pEnd )
         return beans::Property();
     return *pFind;
@@ -1307,15 +1301,18 @@
     };
     const uno::Reference < beans::XPropertySetInfo > xInfo = m_xReportComponent->getPropertySetInfo();
     const uno::Sequence< beans::Property> aSeq = xInfo->getProperties();
-    for (size_t i = 0; i < sizeof(pIncludeProperties)/sizeof(pIncludeProperties[0]) ;++i )
+    for (const auto & rIncludeProp : pIncludeProperties)
     {
         const beans::Property* pIter = aSeq.getConstArray();
         const beans::Property* pEnd  = pIter + aSeq.getLength();
-        const beans::Property* pFind = ::std::find_if(pIter,pEnd,::std::bind2nd(PropertyCompare(),boost::cref(pIncludeProperties[i])));
+        const beans::Property* pFind = ::std::find_if(pIter, pEnd,
+            [&rIncludeProp] (const beans::Property& x) -> bool {
+                return x.Name.equals(rIncludeProp);
+            });
         if ( pFind != pEnd )
         {
             // special case for controls which contain a data field
-            if ( PROPERTY_DATAFIELD == pIncludeProperties[i] )
+            if ( PROPERTY_DATAFIELD == rIncludeProp )
             {
                 beans::Property aValue;
                 aValue.Name = PROPERTY_FORMULALIST;
--- source/core/sdr/PropertyForward.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/core/sdr/PropertyForward.cxx	2021-05-12 13:47:45.000000000 -0400
@@ -119,11 +119,9 @@
                             aFind = ::std::find_if(
                                 m_aNameMap.begin(),
                                 m_aNameMap.end(),
-                                ::o3tl::compose1(
-                                ::std::bind2nd(::std::equal_to< OUString >(), evt.PropertyName),
-                                    ::o3tl::compose1(::o3tl::select1st<TPropertyConverter>(),::o3tl::select2nd<TPropertyNamePair::value_type>())
-                                )
-                            );
+                                [&evt] (TPropertyNamePair::value_type namePair) {
+                                    return namePair.second.first == evt.PropertyName;
+                                });
                             if ( aFind != m_aNameMap.end() )
                                 sPropName = aFind->first;
                         }
