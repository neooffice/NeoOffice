--- source/component/GroupManager.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/component/GroupManager.cxx	2021-05-11 16:38:29.000000000 -0400
@@ -82,15 +82,6 @@
 {
 }
 
-OGroupComp::OGroupComp(const OGroupComp& _rSource)
-    :m_aName( _rSource.m_aName )
-    ,m_xComponent( _rSource.m_xComponent )
-    ,m_xControlModel(_rSource.m_xControlModel)
-    ,m_nPos( _rSource.m_nPos )
-    ,m_nTabIndex( _rSource.m_nTabIndex )
-{
-}
-
 OGroupComp::OGroupComp(const Reference<XPropertySet>& rxSet, sal_Int32 nInsertPos )
     : m_aName( OGroupManager::GetGroupName( rxSet ) )
     , m_xComponent( rxSet )
--- source/component/GroupManager.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/component/GroupManager.hxx	2021-05-11 16:39:29.000000000 -0400
@@ -98,7 +98,6 @@
 
 public:
     OGroupComp(const ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet>& rxElement, sal_Int32 nInsertPos );
-    OGroupComp(const OGroupComp& _rSource);
     OGroupComp();
 
     bool operator==( const OGroupComp& rComp ) const;
--- source/inc/property.hxx	2015-11-25 07:55:38.000000000 -0500
+++ source/inc/property.hxx	2021-05-11 16:45:13.000000000 -0400
@@ -53,8 +53,6 @@
         sal_Int32           nHandle;
 
         PropertyAssignment() { nHandle = -1; }
-        PropertyAssignment(const PropertyAssignment& _rSource)
-            :sName(_rSource.sName), nHandle(_rSource.nHandle) { }
         PropertyAssignment(const OUString& _rName, sal_Int32 _nHandle)
             :sName(_rName), nHandle(_nHandle) { }
 
--- source/xforms/binding.cxx	2015-11-25 07:55:38.000000000 -0500
+++ source/xforms/binding.cxx	2021-05-12 07:35:46.000000000 -0400
@@ -712,13 +712,13 @@
     Reference<XInterface> xSource = static_cast<XPropertySet*>( this );
     ::std::for_each( maModifyListeners.begin(),
               maModifyListeners.end(),
-              ::std::bind2nd( ::std::ptr_fun( lcl_modified ), xSource ) );
+                     ::std::bind( lcl_modified, std::placeholders::_1, xSource ) );
     ::std::for_each( maListEntryListeners.begin(),
               maListEntryListeners.end(),
-              ::std::bind2nd( ::std::ptr_fun( lcl_listentry ), xSource ) );
+                     ::std::bind( lcl_listentry, std::placeholders::_1, xSource ) );
     ::std::for_each( maValidityListeners.begin(),
               maValidityListeners.end(),
-              ::std::bind2nd( ::std::ptr_fun( lcl_validate ), xSource ) );
+                     ::std::bind( lcl_validate, std::placeholders::_1, xSource ) );
 
     // now distribute MIPs to children
     if( xNode.is() )
