<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="XGrammarGUI" script:language="StarBasic">REM  *****  BASIC  *****

Dim Dlg as Object
Dim Doc as Object
Dim DocCtrl as Object
Dim SentenceIter as Object
Dim checkComplete as Boolean
Dim lastSentenceProcessed as Boolean
Dim ignoredStrings(1)
Dim haveIgnoredStrings as Boolean
Dim grammarCheckerService as Object
Dim checkSelectionOnly as Boolean
Dim selectionToCheck as Object			&apos; an XTextRange
Dim textRangeCompare as Object			&apos; an XTextRangeCompare interface

Sub Main
	if IsNull(StarDesktop.CurrentComponent) Then
		MsgBox &quot;No document available to check!&quot;, 0, &quot;Grammar Checker&quot;
		Exit Sub
	End If
	
	grammarCheckerService = CreateUnoService(&quot;org.neooffice.GrammarChecker&quot;)
	if IsNull(grammarCheckerService) Then
		MsgBox &quot;Grammar checker is not available for this operating system.&quot;, 0, &quot;Grammar Checker&quot;
		Exit Sub
	End If
	
	If grammarCheckerService.hasGrammarChecker() = False Then
		MsgBox &quot;Grammar checker could not be loaded.&quot;, 0, &quot;Grammar Checker&quot;
		Exit Sub
	End If
	
	Doc = StarDesktop.CurrentComponent
	DocCtrl = Doc.getCurrentController()
	StartGrammarCheck
End Sub

Sub CheckDocument
	&apos; perform grammar check with entire document
	
	checkSelectionOnly = False
	Main
End Sub

Sub CheckSelection	
	&apos; perform grammar check with selected portion of document only
	checkSelectionOnly = True
	
	Main
End Sub

Sub CreateTextRangeCompare
	&apos; construct an instance of the XTextRangeCompare for checking boundaries
	&apos; of different text ranges
	
	textRangeCompare
End Sub

Rem Displays the grammar check GUI dialog
Sub StartGrammarCheck
	&apos; note that we are not yet finished checking the document
	
	checkComplete = False
	lastSentenceProcessed = False
	haveIgnoredStrings = False
	ReDim ignoredStrings()
	
	&apos; if we&apos;re performing a selection only check, extract our user&apos;s
	&apos; current text selection for processing
	
	If checkSelectionOnly Then
		&apos; verify we have a selection
		
		If Doc.getCurrentSelection.getCount() = 0 Then
			MsgBox &quot;No selection exists to check!&quot;, 0, &quot;Grammar Checker&quot;
			checkComplete = True
			Exit Sub
		End If
		
		&apos; get the current selection
		
		selectionToCheck = Doc.getCurrentSelection.getByIndex(0)
		
		&apos; check for empty selections
		
		If Doc.Text.compareRegionStarts(selectionToCheck.getStart(), selectionToCheck.getEnd()) = 0 Then
			MsgBox &quot;No text is selected!&quot;, 0, &quot;Grammar Checker&quot;
			checkComplete = True
			Exit Sub
		End If
	End If
	
	&apos; construct our text cursor for iterating through the sentences of the
	&apos; document
	
	SentenceIter = Doc.Text.createTextCursor()
	
	If checkSelectionOnly Then
		&apos; take us to the beginning of the selected area
		SentenceIter.gotoRange(selectionToCheck.getStart(), False)
	Else
		&apos; take us to the beginning of the entire document
		SentenceIter.gotoStart(False)
	End If
	
	&apos; construct our dialog
	
	DialogLibraries.LoadLibrary(&quot;GrammarGUI&quot;)
	
	Dlg=CreateUnoDialog(DialogLibraries.GrammarGUI.GrammarGUI)
	
	&apos; attempt to locate the first grammar error.
	
	FindNextGrammarError
	If checkComplete Then
		MsgBox &quot;No grammar errors found.&quot;, 0, &quot;Grammar Checker&quot;
		Exit Sub
	End If
	
	&apos; run the dialog until we have found or ignored all of the grammar errors
	
	Dlg.Execute()
	Dlg.dispose()
End Sub

Rem Given the text cursor in the global SentenceIter, iterate until the next grammar
Rem error is found and set our controls of the dialog accordingly.
Sub FindNextGrammarError
	Do
		&apos; if we&apos;ve finished the last sentence, exit and mark that our check is complete
		
		If lastSentenceProcessed = True Then
			checkComplete = True
			Exit Do
		End If
		
		&apos; iterate to the next sentence of the document and check its grammar
		
		SentenceIter.collapseToEnd()
		If Not IsNull(SentenceIter.CharLocale) And Not IsEmpty(SentenceIter.CharLocale) Then
			grammarCheckerService.setLocale(SentenceIter.CharLocale)
		End If
		
		hasMoreData = SentenceIter.gotoNextSentence(True)
		If hasMoreData = False Then
			hasMoreData = SentenceIter.gotoNextParagraph(True)
			If hasMoreData And checkSelectionOnly Then
				If Doc.Text.compareRegionStarts(selectionToCheck.getEnd(), SentenceIter.Start) &gt;= 0 Then
					hasMoreData = False
				End If
			End If
		End If
		If hasMoreData = False Then
			&apos; we have reached the final sentence.  Select from the current cursor
			&apos; to the end of the document
			
			If checkSelectionOnly Then
				SentenceIter.gotoEnd(True)
			Else
				SentenceIter.gotoEndOfParagraph(True)
			End If
			lastSentenceProcessed = True
		End If
		
		&apos; if we&apos;re doing selected area checking only, determine if we&apos;re past the
		&apos; end of the user&apos;s selection
		
		If checkSelectionOnly Then
			If Doc.Text.compareRegionStarts(selectionToCheck.getEnd(), SentenceIter.Start) &gt;= 0 Then
				&apos; the end of the user&apos;s initial selection occurs after the
				&apos; start of the current sentence, so end the grammar check
				
				checkComplete = True
				Exit Do
			End If
		End If
		
		&apos; check that we have a non-empty sentence (e.g. skip over carriage returns
		&apos; and other single character whitespace)
		
		If Len(SentenceIter.String) &gt; 1 Then
			&apos; Check the grammar of the highlighted sentence
			
			If CheckSentenceGrammar = False Then
				Exit Do
			End If
		End If
	Loop While True
End Sub

Rem Given the selection in the global SentenceIter, pass it to the grammar
Rem checker.  If the grammar checker flags a grammar error, update the
Rem controls of our dialog and return the appropriate error code
Function CheckSentenceGrammar
	&apos; check through the ignored strings
	
	If haveIgnoredStrings = True Then
		Dim i as Integer
		For i = 0 to UBound(ignoredStrings)
			If ignoredStrings(i) = SentenceIter.String Then
				CheckSentenceGrammar = True
				Exit Function
			End If
		Next i
	End If
	
	&apos; pass the string to the grammar checker
	
	Dim replacementStrings as Object
	replacementStrings = grammarCheckerService.checkString(SentenceIter.String)
	If UBound(replacementStrings) &lt; LBound(replacementStrings) Then
		&apos; an empty sequence was returned from our grammar checker.
		&apos; The source string has no grammar errors
		
		CheckSentenceGrammar = True
		Exit Function
	End If
	
	&apos; The string failed our grammar checker and is not an ignored string.
	&apos; set the source sentence label to match the incorrect source
	
	Dim srcLabel as Object
	srcLabel = Dlg.getControl(&quot;sourceTextLabel&quot;)
	srcLabel.Text = SentenceIter.String
	
	&apos; set the user-visible explaination of why the source was flagged
	
	Dim explainLabel as Object
	explainLabel = Dlg.getControl(&quot;explainLabel&quot;)
	explainLabel.Text = replacementStrings(0).aDescription
	
	&apos; set the potential replacements to the grammar checker&apos;s suggested values
	
	Dim correctionListBox as Object
	correctionListBox = Dlg.getControl(&quot;correctionListBox&quot;)
	If correctionListBox.ItemCount &gt; 0 Then
		&apos; remove previous suggestions from the list box
		correctionListBox.removeItems(0, correctionListBox.ItemCount)
	End If
	
	Dim replacementListIndex as Integer
	replacementListIndex = 0
	
	For i = LBound(replacementStrings) to UBound(replacementStrings)
		Dim replacmenets as Object
		replacements=replacementStrings(i).aSuggestedReplacements
		
		If UBound(replacements) &gt;= LBound(replacements) Then
			Dim j as Integer
			
			For j = LBound(replacements) to UBound(replacements)
				&apos; construct the replacement string from the beginning portion
				&apos; of the original string, the replacement, and the trailing
				
				Dim correction as String
				correction = &quot;&quot;
				
				If replacementStrings(i).lStartIndex &gt; 0 Then
					correction = correction + Left(SentenceIter.String, replacementStrings(i).lStartIndex)
				End If
				
				correction = correction + replacements(j)
				
				If (replacementStrings(i).lStartIndex + replacementStrings(i).lLength) &lt; Len(SentenceIter.String) Then
					correction = correction + Right(SentenceIter.String, Len(SentenceIter.String)-(replacementStrings(i).lStartIndex + replacementStrings(i).lLength))
				End If
				
				&apos; add the corrected string ontoour list
				
				correctionListBox.addItem(correction, replacementListIndex)
				
				&apos; move to the next index in our list
				
				replacementListIndex = replacementListIndex + 1
			Next j
		End If
	Next i
	
	&apos; select first correction by default
		
	If (correctionListBox.ItemCount &gt; 0) And (correctionListBox.SelectedItemPos &lt; 0) Then
		correctionListBox.selectItem(0, True)
	End If
	
	&apos; mark our grammar as having an incorrect segment
	
	CheckSentenceGrammar = False
End Function

Rem Handle ignore button.  This increments past the currently flagged error and
Rem moves onto the next error in the list.
Sub ignoreButton_Initiated
	&apos; move onto the next grammar error
	
	FindNextGrammarError
	If checkComplete Then
		MsgBox &quot;Grammar check complete.&quot;, 0, &quot;Grammar Checker&quot;
		Dlg.endExecute()
		Exit Sub
	End If
End Sub

Rem Handle ignore all button.  This places the currently highlighted error onto our list
Rem of acceptable errors that will be ignored even if the grammar checker flags them.
Rem Iterates to the next sentence to be chedked.
Sub ignoreAllButton_Initiated
	&apos; add the text onto the end of our current macro array
	
	If haveIgnoredStrings = False Then
		ReDim ignoredStrings(1)
	Else
		ReDim ignoredStrings(UBound(ignoredStrings)+1)
	End If
	ignoredStrings(UBound(ignoredStrings)) = SentenceIter.String
	haveIgnoredStrings = True
	
	&apos; move onto the next grammar error
	
	FindNextGrammarError
	If checkComplete Then
		MsgBox &quot;Grammar check complete.&quot;, 0, &quot;Grammar Checker&quot;
		Dlg.endExecute()
		Exit Sub
	End If
End Sub

Rem Handle the Change button for replacing the selected sentence text with the highlighted
Rem correction in the corrections list
Sub changeButton_Initiated
	&apos; get the current correction text and replace our source with this text
	
	Dim correctionListBox as Object
	
	correctionListBox = Dlg.getControl(&quot;correctionListBox&quot;)
	If correctionListBox.ItemCount &gt; 0 Then
		&apos; check for a selection.
		
		If correctionListBox.SelectedItemPos &lt; 0 Then
			MsgBox &quot;Please select a suggested correction from the list, or click &apos;Ignore&apos;.&quot;, 0, &quot;Grammar Checker&quot;
			Exit Sub
		Else
			SentenceIter.String = correctionListBox.SelectedItem
		End If
	End If

	&apos; iterate on and check the next sentence of the document
	
	FindNextGrammarError
	If checkComplete Then
		MsgBox &quot;Grammar check complete.&quot;, 0, &quot;Grammar Checker&quot;
		Dlg.endExecute()
		Exit Sub
	End If
End Sub

Rem Handle close button to dismiss the grammar dialog
Sub closeButton_Initiated
	Dlg.endExecute()
End Sub
</script:module>
